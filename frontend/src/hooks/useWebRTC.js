import { useRef, useEffect, useState, useCallback } from 'react';

const STUN_SERVERS = [
  { urls: 'stun:stun.l.google.com:19302' },
  { urls: 'stun:stun1.l.google.com:19302' }
];

export default function useWebRTC({
  localVideoRef,
  remoteVideoRef,
  signalingSocket,
  isCaller,
  callType = 'video',
  onCallEnd,
  onError,
  onOfferReceived,
  onCallAccepted
}) {
  const [callActive, setCallActive] = useState(false);
  const [micEnabled, setMicEnabled] = useState(true);
  const [camEnabled, setCamEnabled] = useState(true);
  const [connectionState, setConnectionState] = useState('new');
  const [peerReady, setPeerReady] = useState(false); // –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ peer
  const peerRef = useRef(null);
  const localStreamRef = useRef(null);
  const remoteStreamRef = useRef(null); // –î–æ–±–∞–≤–ª—è–µ–º ref –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
  const socketRef = useRef(null); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ WebSocket
  const activeRef = useRef(true); // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  const timersRef = useRef([]); // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏
  const addTimer = useCallback((timerId) => {
    if (activeRef.current) {
      timersRef.current.push(timerId);
    }
  }, []);

  const clearAllTimers = useCallback(() => {
    timersRef.current.forEach(timerId => {
      clearTimeout(timerId);
    });
    timersRef.current = [];
  }, []);

  const safeSetTimeout = useCallback((callback, delay) => {
    if (!activeRef.current) return null;
    
    const timerId = setTimeout(() => {
      if (activeRef.current) {
        callback();
      }
    }, delay);
    
    addTimer(timerId);
    return timerId;
  }, [addTimer]);

  // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–æ–≤ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const stopAllMediaTracks = useCallback(() => {
    console.log('üõë –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–æ–≤...');
    let tracksCount = 0;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const allTracks = [];
    
    if (localStreamRef.current) {
      const tracks = localStreamRef.current.getTracks();
      allTracks.push(...tracks);
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${tracks.length} —Ç—Ä–µ–∫–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ:`);
      tracks.forEach((track, index) => {
        console.log(`  –¢—Ä–µ–∫ ${index + 1}: ${track.kind} "${track.label}" (${track.readyState})`);
        
        try {
          if (track.readyState !== 'ended') {
            console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫ ${index + 1}: ${track.kind} "${track.label}"`);
            track.stop();
            tracksCount++;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            setTimeout(() => {
              console.log(`  ‚úÖ –¢—Ä–µ–∫ ${index + 1} —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${track.readyState}`);
            }, 100);
          } else {
            console.log(`  ‚è≠Ô∏è –¢—Ä–µ–∫ ${index + 1} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–∫–∞ ${index + 1}:`, error);
        }
      });
      
      // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ç–æ–∫
      localStreamRef.current = null;
      console.log('üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—á–∏—â–µ–Ω');
    }
    
    // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
    if (remoteStreamRef.current) {
      const remoteTracks = remoteStreamRef.current.getTracks();
      if (remoteTracks.length > 0) {
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${remoteTracks.length} —Ç—Ä–µ–∫–æ–≤ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ`);
        remoteTracks.forEach((track, index) => {
          try {
            if (track.readyState !== 'ended') {
              console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ ${index + 1}: ${track.kind}`);
              track.stop();
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ${index + 1}:`, error);
          }
        });
      }
      remoteStreamRef.current = null;
      console.log('üîÑ –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—á–∏—â–µ–Ω');
    }
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if (localVideoRef && localVideoRef.current) {
      try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç...');
        localVideoRef.current.pause();
        localVideoRef.current.srcObject = null;
        localVideoRef.current.src = '';
        localVideoRef.current.load();
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –æ—á–∏—â–µ–Ω');
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
      }
    }
    
    if (remoteVideoRef && remoteVideoRef.current) {
      try {
        console.log('üßπ –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç...');
        remoteVideoRef.current.pause();
        remoteVideoRef.current.srcObject = null;
        remoteVideoRef.current.src = '';
        remoteVideoRef.current.load();
        console.log('‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –æ—á–∏—â–µ–Ω');
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
      }
    }
    
    console.log(`‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${tracksCount} –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–æ–≤`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–ª—É—á–∞–π "–∑–∞–±—ã—Ç—ã—Ö" —Ç—Ä–µ–∫–æ–≤
    setTimeout(() => {
      console.log('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã
      allTracks.forEach((track, index) => {
        if (track.readyState !== 'ended') {
          console.warn(`‚ö†Ô∏è –¢—Ä–µ–∫ ${index + 1} –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω: ${track.kind} "${track.label}" (${track.readyState})`);
          try {
            console.log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–∑–∞–±—ã—Ç—ã–π" —Ç—Ä–µ–∫ ${index + 1}`);
            track.stop();
            setTimeout(() => {
              console.log(`  ‚úÖ "–ó–∞–±—ã—Ç—ã–π" —Ç—Ä–µ–∫ ${index + 1} —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${track.readyState}`);
            }, 200);
          } catch (error) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫ ${index + 1}:`, error);
          }
        }
      });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—É—Å—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É, –∑–∞—Ç–µ–º —Å—Ä–∞–∑—É –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º
      navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then((tempStream) => {
          console.log('üì∑ –ü–æ–ª—É—á–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
          const tempTracks = tempStream.getTracks();
          tempTracks.forEach((track, index) => {
            console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ ${index + 1}: ${track.kind}`);
            track.stop();
          });
          
          // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            navigator.mediaDevices.getUserMedia({ video: false, audio: false })
              .then(() => {
                console.log('‚úÖ –ú–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
              })
              .catch(() => {
                console.log('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ)');
              });
          }, 500);
        })
        .catch((error) => {
          console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã):', error.message);
        });
    }, 1500);
    
  }, [localVideoRef, remoteVideoRef]);

  // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∏–∫–æ–Ω–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≥–æ—Ä–µ—Ç—å)
  const forceReleaseMediaDevices = useCallback(() => {
    console.log('üö® –§–û–†–°–ò–†–û–í–ê–ù–ù–û–ï –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞—á–∞—Ç–æ...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–∏
    stopAllMediaTracks();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    setTimeout(() => {
      console.log('üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫ –∏ —Å—Ä–∞–∑—É –µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then((stream) => {
          console.log('üì∑ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è');
          const tracks = stream.getTracks();
          
          // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
          tracks.forEach((track, index) => {
            console.log(`üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ ${index + 1}: ${track.kind} "${track.label}"`);
            track.stop();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
              console.log(`  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ ${index + 1} —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${track.readyState}`);
            }, 100);
          });
          
          // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
          setTimeout(() => {
            console.log('üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...');
            
            for (let i = 0; i < 3; i++) {
              setTimeout(() => {
                console.log(`üîÑ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/3`);
                
                navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                  .then((tempStream2) => {
                    tempStream2.getTracks().forEach(track => {
                      console.log(`üõë –ë—ã—Å—Ç—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–∞: ${track.kind}`);
                      track.stop();
                    });
                  })
                  .catch(() => {
                    console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—Ö–æ—Ä–æ—à–∏–π –∑–Ω–∞–∫)`);
                  });
              }, i * 300);
            }
          }, 500);
          
          // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
          setTimeout(() => {
            console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π - –¥–æ–ª–∂–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –≤—Å–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ
            navigator.mediaDevices.getUserMedia({ video: false, audio: false })
              .then(() => {
                console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
              })
              .catch(() => {
                console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞)');
              });
              
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –≤–∏–¥–µ–æ - –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ
            navigator.mediaDevices.getUserMedia({ video: { width: 1, height: 1 }, audio: false })
              .then((testStream) => {
                console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º');
                testStream.getTracks().forEach(track => {
                  console.log('üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞');
                  track.stop();
                });
              })
              .catch(() => {
                console.log('‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: –∫–∞–º–µ—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–Ω–∞—á–∏—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞');
              });
          }, 2000);
        })
        .catch((error) => {
          console.log('‚úÖ –•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
          console.log('   –û—à–∏–±–∫–∞:', error.message);
        });
    }, 200);
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ getUserMedia —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    setTimeout(() => {
      console.log('üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è "–≤—Å—Ç—Ä—è—Å–∫–∏" —Å–∏—Å—Ç–µ–º—ã
      const attempts = [
        { video: { width: { exact: 1 } }, audio: false },
        { video: false, audio: { sampleRate: { exact: 1 } } },
        { video: { deviceId: 'nonexistent' }, audio: false }
      ];
      
      attempts.forEach((constraints, index) => {
        setTimeout(() => {
          navigator.mediaDevices.getUserMedia(constraints)
            .then(stream => {
              console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –≤ –ø–æ–ø—ã—Ç–∫–µ ${index + 1}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º`);
              stream.getTracks().forEach(track => track.stop());
            })
            .catch(() => {
              console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${index + 1}: –æ–∂–∏–¥–∞–µ–º–∞—è –Ω–µ—É–¥–∞—á–∞, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`);
            });
        }, index * 100);  
      });
    }, 1000);
    
    console.log('üö® –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }, [stopAllMediaTracks]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
  const handleOffer = useCallback(async (offer) => {
    const peer = peerRef.current;
    if (!peer) {
      return;
    }
    
    try {
      await peer.setRemoteDescription(new RTCSessionDescription(offer));
      
      const answer = await peer.createAnswer();
      await peer.setLocalDescription(answer);
      
      const currentSocket = socketRef.current || signalingSocket;
      if (currentSocket && currentSocket.readyState === WebSocket.OPEN) {
        currentSocket.send(JSON.stringify({ 
          type: 'answer', 
          sdp: answer 
        }));
      }
    } catch (error) {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }, [signalingSocket]);

  const handleAnswer = useCallback(async (answer) => {
    const peer = peerRef.current;
    if (!peer) {
      return;
    }
    
    try {
      await peer.setRemoteDescription(new RTCSessionDescription(answer));
    } catch (error) {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }, []);

  const handleIceCandidate = useCallback(async (candidate) => {
    const peer = peerRef.current;
    if (!peer) {
      return;
    }
    
    try {
      await peer.addIceCandidate(new RTCIceCandidate(candidate));
    } catch (error) {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }, []);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
  const setupLocalVideo = useCallback((stream) => {
    if (!localVideoRef || !localVideoRef.current || !document.contains(localVideoRef.current)) {
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    localVideoRef.current.onloadedmetadata = null;
    localVideoRef.current.oncanplay = null;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
    localVideoRef.current.srcObject = stream;
    localVideoRef.current.muted = true; // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ö–æ
    localVideoRef.current.playsInline = true;
    localVideoRef.current.autoplay = true;
    localVideoRef.current.controls = false;
    
    // –£–±–∏—Ä–∞–µ–º poster —á—Ç–æ–±—ã –≤–∏–¥–µ–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å
    localVideoRef.current.poster = '';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    localVideoRef.current.onloadedmetadata = () => {
      if (localVideoRef.current && document.contains(localVideoRef.current)) {
        localVideoRef.current.play().catch(() => {});
      }
    };
    
    localVideoRef.current.oncanplay = () => {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      if (localVideoRef.current && localVideoRef.current.paused && document.contains(localVideoRef.current)) {
        localVideoRef.current.play().catch(() => {});
      }
    };
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    const forcePlay = (attemptNumber = 1) => {
      if (!activeRef.current) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      
      if (localVideoRef.current && localVideoRef.current.srcObject && document.contains(localVideoRef.current)) {
        localVideoRef.current.play()
          .then(() => {
            // –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ
          })
          .catch(() => {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if (attemptNumber < 5 && activeRef.current) {
              safeSetTimeout(() => forcePlay(attemptNumber + 1), 500 * attemptNumber);
            }
          });
      }
    };
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
    forcePlay();
    
    // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    safeSetTimeout(() => forcePlay(2), 100);
    safeSetTimeout(() => forcePlay(3), 500);
    safeSetTimeout(() => forcePlay(4), 1000);
    safeSetTimeout(() => forcePlay(5), 2000);
    
  }, [safeSetTimeout]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞ –∏ peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const start = useCallback(async (passedSocket = null) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π WebSocket –∏–ª–∏ —Ç–µ–∫—É—â–∏–π
    const activeSocket = passedSocket || signalingSocket;
    socketRef.current = activeSocket;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞
      const isVideoCall = callType === 'video';
      
              // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
      
      const stream = await navigator.mediaDevices.getUserMedia({
        video: isVideoCall ? {
          width: { ideal: 1280, max: 1920 },
          height: { ideal: 720, max: 1080 },
          frameRate: { ideal: 30, max: 60 }
        } : false,
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      });
      
      localStreamRef.current = stream;
              // –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
      if (isVideoCall) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const trySetupLocalVideo = (attemptNumber = 1) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
          if (!activeRef.current) {
                          // WebRTC —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ ref, –Ω–æ –∏ —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ DOM
          if (localVideoRef && localVideoRef.current && document.contains(localVideoRef.current)) {
                          // localVideoRef –¥–æ—Å—Ç—É–ø–µ–Ω
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
            localVideoRef.current.srcObject = stream;
            localVideoRef.current.muted = true;
            localVideoRef.current.playsInline = true;
            localVideoRef.current.autoplay = true;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
            setupLocalVideo(stream);
          } else if (attemptNumber <= 20) { // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 20 –ø–æ–ø—ã—Ç–æ–∫
            console.warn(`‚ö†Ô∏è localVideoRef –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber}/20`);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É —Å –º–∞–∫—Å–∏–º—É–º–æ–º –≤ 2 —Å–µ–∫—É–Ω–¥—ã
            const delay = Math.min(500 * Math.pow(1.2, attemptNumber - 1), 2000);
            safeSetTimeout(() => {
              trySetupLocalVideo(attemptNumber + 1);
            }, delay);
          } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ 20 –ø–æ–ø—ã—Ç–æ–∫');
            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            safeSetTimeout(() => {
              if (activeRef.current && localVideoRef && localVideoRef.current) {
                console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ');
                localVideoRef.current.srcObject = stream;
                localVideoRef.current.muted = true;
                localVideoRef.current.playsInline = true;
                localVideoRef.current.autoplay = true;
                setupLocalVideo(stream);
              }
            }, 3000);
          }
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
        trySetupLocalVideo();
      } else {
        console.log('üéôÔ∏è –ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ - –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      }
      
      // –°–æ–∑–¥–∞–µ–º peer connection
      const peer = new RTCPeerConnection({
        iceServers: STUN_SERVERS
      });
      
      peerRef.current = peer;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
      stream.getTracks().forEach(track => {
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫:', track.kind, track.label);
        peer.addTrack(track, stream);
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π peer connection
      peer.onicecandidate = (event) => {
        if (event.candidate) {
          const currentSocket = socketRef.current;
          
          if (currentSocket && currentSocket.readyState === WebSocket.OPEN) {
            try {
              currentSocket.send(JSON.stringify({
                type: 'ice-candidate',
                candidate: event.candidate
              }));
            } catch (error) {
              console.error('Error sending ICE candidate:', error);
            }
          }
        }
      };
      
      peer.ontrack = (event) => {
        console.log('üì∫ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫:', event);
        if (event.streams && event.streams[0]) {
          const stream = event.streams[0];
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –≤ ref –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
          remoteStreamRef.current = stream;
          
          if (remoteVideoRef.current) {
            if (remoteVideoRef.current.srcObject !== stream) {
              if (remoteVideoRef.current.srcObject) {
                remoteVideoRef.current.pause();
              }
              
              console.log('üé• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ...');
              remoteVideoRef.current.srcObject = stream;
              remoteVideoRef.current.playsInline = true;
              remoteVideoRef.current.autoplay = true;
              
              // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
              remoteVideoRef.current.play()
                .then(() => {
                  console.log('‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
                })
                .catch((error) => {
                  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ:', error);
                });
            }
          }
        }
      };
      
      peer.onconnectionstatechange = () => {
        console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', peer.connectionState);
        setConnectionState(peer.connectionState);
        
        if (peer.connectionState === 'connected') {
          setCallActive(true);
          console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
          
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (callType === 'video' && localStreamRef.current) {
          console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
          
          if (!localVideoRef || !localVideoRef.current || !document.contains(localVideoRef.current)) {
            console.warn('‚ö†Ô∏è localVideoRef –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            const retryCount = 15; // –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            let attempts = 0;
            
            const retrySetupVideo = () => {
              if (!activeRef.current) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              
              attempts++;
              if (localVideoRef && localVideoRef.current && document.contains(localVideoRef.current) && localStreamRef.current) {
                console.log('‚úÖ localVideoRef —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ');
                setupLocalVideo(localStreamRef.current);
              } else if (attempts < retryCount) {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${attempts}/${retryCount})`);
                safeSetTimeout(retrySetupVideo, 800);
              } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ localVideoRef –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                safeSetTimeout(() => {
                  if (activeRef.current && localVideoRef && localVideoRef.current && localStreamRef.current) {
                    console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                    setupLocalVideo(localStreamRef.current);
                  }
                }, 2000);
              }
            };
            
            retrySetupVideo();
          } else {
            if (!localVideoRef.current.srcObject) {
              console.log('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–π—á–∞—Å');
              setupLocalVideo(localStreamRef.current);
            } else if (localVideoRef.current.paused) {
              console.log('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ –ø–∞—É–∑–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
              localVideoRef.current.play().catch(() => {});
            }
          }
        }
          
          if (onCallAccepted) {
            onCallAccepted();
          }
        } else if (peer.connectionState === 'failed') {
          console.error('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
          if (onError) {
            onError(new Error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'));
          }
        } else if (peer.connectionState === 'disconnected') {
          console.warn('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
        }
      };
      
      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
      peer.oniceconnectionstatechange = () => {
        console.log('üßä ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', peer.iceConnectionState);
        
        if (peer.iceConnectionState === 'failed') {
          console.error('‚ùå ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
          if (onError) {
            onError(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'));
          }
        } else if (peer.iceConnectionState === 'disconnected') {
          console.warn('‚ö†Ô∏è ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
        }
      };
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setPeerReady(true);
              // WebRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.name === 'NotAllowedError') {
        console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
        if (onError) onError(new Error('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω'));
      } else if (error.name === 'NotFoundError') {
        console.error('–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        if (onError) onError(new Error('–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'));
      } else if (error.name === 'NotReadableError') {
        console.error('–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è');
        if (onError) onError(new Error('–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è'));
      } else {
        if (onError) onError(error);
      }
    }
  }, [signalingSocket, callType, onError, onCallAccepted, localVideoRef, remoteVideoRef]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebRTC
  const stop = useCallback(() => {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    activeRef.current = false;
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    clearAllTimers();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    stopAllMediaTracks();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection
    if (peerRef.current) {
      try {
        console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection');
        peerRef.current.close();
        console.log('‚úÖ Peer connection –∑–∞–∫—Ä—ã—Ç');
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ peer connection:', error);
      }
      peerRef.current = null;
    }
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (localVideoRef && localVideoRef.current) {
      try {
        localVideoRef.current.onloadedmetadata = null;
        localVideoRef.current.oncanplay = null;
        localVideoRef.current.onplay = null;
        localVideoRef.current.onpause = null;
        localVideoRef.current.onerror = null;
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ localVideoRef:', error);
      }
    }
    
    if (remoteVideoRef && remoteVideoRef.current) {
      try {
        remoteVideoRef.current.onloadedmetadata = null;
        remoteVideoRef.current.oncanplay = null;
        remoteVideoRef.current.onplay = null;
        remoteVideoRef.current.onpause = null;
        remoteVideoRef.current.onerror = null;
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ remoteVideoRef:', error);
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setCallActive(false);
    setConnectionState('new'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setPeerReady(false);
    setMicEnabled(true);
    setCamEnabled(true);
    socketRef.current = null;
    
          // WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã, –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã
  }, [clearAllTimers, stopAllMediaTracks]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (!signalingSocket) return;

    const handleMessage = (event) => {
      try {
        if (!event || !event.data) {
          return;
        }
        
        let data;
        try {
          data = JSON.parse(event.data);
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
          return;
        }
        
        
        if (!data || typeof data !== 'object') {
          return;
        }
        
        if (!data.type) {
          return;
        }

        switch (data.type) {
          case 'connection-established':
            break;
          case 'offer':
            if (data.sdp && typeof data.sdp === 'object') {
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ offer
              if (onOfferReceived) {
                onOfferReceived();
              }
              handleOffer(data.sdp);
            } else {
              console.error('Offer –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:', data.sdp);
            }
            break;
          case 'answer':
            if (data.sdp && typeof data.sdp === 'object') {
              handleAnswer(data.sdp);
            } else {
              console.error('Answer –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:', data.sdp);
            }
            break;
          case 'ice-candidate':
            if (data.candidate && typeof data.candidate === 'object') {
              handleIceCandidate(data.candidate);
            } else {
              console.error('ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:', data.candidate);
            }
            break;
          case 'call-accepted':
            setCallActive(true);
            // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
            if (onCallAccepted) {
              onCallAccepted();
            }
            break;
          case 'call-ended':
            setCallActive(false);
            if (onCallEnd) {
              onCallEnd();
            }
            break;
          default:
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error, '–î–∞–Ω–Ω—ã–µ:', event?.data);
      }
    };

    signalingSocket.addEventListener('message', handleMessage);
    return () => {
      signalingSocket.removeEventListener('message', handleMessage);
    };
  }, [signalingSocket, handleOffer, handleAnswer, handleIceCandidate, onCallEnd, onCallAccepted]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
  const toggleMic = useCallback(() => {
    if (localStreamRef.current) {
      const audioTracks = localStreamRef.current.getAudioTracks();
      audioTracks.forEach(track => {
        track.enabled = !track.enabled;
        console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω:', track.enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω');
        setMicEnabled(track.enabled);
      });
    }
  }, []);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
  const toggleCam = useCallback(() => {
    if (!activeRef.current || !localStreamRef.current) {
      console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
      return;
    }
    
    const videoTracks = localStreamRef.current.getVideoTracks();
    
    if (videoTracks.length === 0) {
      console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ —Ç—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }
    
    videoTracks.forEach((track, index) => {
      const oldEnabled = track.enabled;
      track.enabled = !track.enabled;
      
      console.log(`üìπ –í–∏–¥–µ–æ —Ç—Ä–µ–∫ ${index + 1} (${track.label}): ${oldEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'} ‚Üí ${track.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—é–±–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
      setCamEnabled(track.enabled);
    });
    
    // –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    const hasEnabledVideo = videoTracks.some(track => track.enabled);
    
    if (hasEnabledVideo && localVideoRef && localVideoRef.current) {
      console.log('üé• –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã');
      setupLocalVideo(localStreamRef.current);
    } else if (!hasEnabledVideo) {
      console.log('üìπ –ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ');
      
      // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã
      if (localVideoRef && localVideoRef.current) {
        try {
          localVideoRef.current.pause();
          // –ù–ï —É–¥–∞–ª—è–µ–º srcObject –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', error);
        }
      }
    }
    
    console.log(`‚úÖ –ö–∞–º–µ—Ä–∞ ${hasEnabledVideo ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
  }, [setupLocalVideo]);

  // –°–æ–∑–¥–∞–Ω–∏–µ offer –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WebSocket –ò peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const createOffer = useCallback(async () => {
    
    if (!peerReady) {
      console.error('Peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è offer');
      return;
    }
    
    const peer = peerRef.current;
    if (!peer) {
      console.error('Peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const currentSocket = socketRef.current || signalingSocket;
    if (!currentSocket || currentSocket.readyState !== WebSocket.OPEN) {
      console.error('WebSocket –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ offer');
      return;
    }
    
    try {
      const offer = await peer.createOffer();
      await peer.setLocalDescription(offer);
      
      currentSocket.send(JSON.stringify({
        type: 'offer',
        sdp: offer
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ offer:', error);
    }
  }, [signalingSocket, peerReady]);

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const endCall = useCallback(() => {
              // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    activeRef.current = false;
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    clearAllTimers();
    
    setCallActive(false);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ WebSocket
    const currentSocket = socketRef.current || signalingSocket;
    if (currentSocket && currentSocket.readyState === WebSocket.OPEN) {
      try {
        currentSocket.send(JSON.stringify({
          type: 'call-ended'
        }));
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
      }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    stopAllMediaTracks();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebRTC
    if (peerRef.current) {
      try {
        console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞');
        peerRef.current.close();
        console.log('‚úÖ Peer connection –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞');
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ peer connection –≤ endCall:', error);
      }
      peerRef.current = null;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setConnectionState('closed');
    setPeerReady(false);
    setMicEnabled(true);
    setCamEnabled(true);
    socketRef.current = null;
    
    // –í—ã–∑—ã–≤–∞–µ–º callback
    if (onCallEnd) {
      console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞');
      onCallEnd();
    }
    
    console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã, –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      if (!activeRef.current) { // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
        console.log('üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞');
        
        // –í—ã–∑—ã–≤–∞–µ–º stopAllMediaTracks –µ—â–µ —Ä–∞–∑ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏
        if (localStreamRef.current) {
          const tracks = localStreamRef.current.getTracks();
          if (tracks.length > 0) {
            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º');
            tracks.forEach((track, index) => {
              if (track.readyState !== 'ended') {
                console.log(`üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫ ${index + 1}: ${track.kind} (${track.readyState})`);
                track.stop();
              }
            });
          }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (localVideoRef && localVideoRef.current) {
          try {
            localVideoRef.current.srcObject = null;
            localVideoRef.current.pause();
            localVideoRef.current.load();
          } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ localVideoRef:', error);
          }
        }
        
        if (remoteVideoRef && remoteVideoRef.current) {
          try {
            remoteVideoRef.current.srcObject = null;
            remoteVideoRef.current.pause();
            remoteVideoRef.current.load();
          } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ remoteVideoRef:', error);
          }
        }
        
        console.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      }
    }, 1500);
    
  }, [signalingSocket, onCallEnd, clearAllTimers, stopAllMediaTracks]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (callActive && callType === 'video' && localStreamRef.current && localVideoRef && localVideoRef.current) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const checkVideoStatus = () => {
        if (!activeRef.current || !localVideoRef.current || !localStreamRef.current) {
          return;
        }
        
        const hasVideoTracks = localStreamRef.current.getVideoTracks().length > 0;
        const hasEnabledVideoTracks = localStreamRef.current.getVideoTracks().some(t => t.enabled);
        
        if (hasVideoTracks && hasEnabledVideoTracks) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä—é –ø–æ—Ç–æ–∫–∞
          if (!localVideoRef.current.srcObject) {
            // –ü–æ—Ç–µ—Ä—è–Ω –ø–æ—Ç–æ–∫ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            localVideoRef.current.srcObject = localStreamRef.current;
            localVideoRef.current.muted = true;
            localVideoRef.current.playsInline = true;
            localVideoRef.current.autoplay = true;
            localVideoRef.current.play().catch(() => {});
          } 
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
          else if (localVideoRef.current.paused) {
            // –ù–∞ –ø–∞—É–∑–µ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            localVideoRef.current.play().catch(() => {});
          }
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞
          else if (localVideoRef.current.srcObject !== localStreamRef.current) {
            // –ù–µ —Ç–æ—Ç –ø–æ—Ç–æ–∫ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            localVideoRef.current.srcObject = localStreamRef.current;
            localVideoRef.current.play().catch(() => {});
          }
        }
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        if (activeRef.current) {
          safeSetTimeout(checkVideoStatus, 1000);
        }
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      checkVideoStatus();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const handleVisibilityChange = () => {
        if (document.visibilityState === 'visible' && activeRef.current) {
          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(checkVideoStatus, 100);
        }
      };
      
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      return () => {
        document.removeEventListener('visibilitychange', handleVisibilityChange);
      };
    }
  }, [callActive, callType, setupLocalVideo, safeSetTimeout]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ - –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (callActive && callType === 'video' && remoteStreamRef.current && remoteVideoRef && remoteVideoRef.current) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const checkRemoteVideoStatus = () => {
        if (!activeRef.current || !remoteVideoRef.current || !remoteStreamRef.current) {
          return;
        }
        
        const hasVideoTracks = remoteStreamRef.current.getVideoTracks().length > 0;
        const hasActiveVideoTracks = remoteStreamRef.current.getVideoTracks().some(t => t.readyState === 'live');
        
        if (hasVideoTracks && hasActiveVideoTracks) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä—é –ø–æ—Ç–æ–∫–∞
          if (!remoteVideoRef.current.srcObject) {
            // –ü–æ—Ç–µ—Ä—è–Ω –ø–æ—Ç–æ–∫ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            remoteVideoRef.current.srcObject = remoteStreamRef.current;
            remoteVideoRef.current.playsInline = true;
            remoteVideoRef.current.autoplay = true;
            remoteVideoRef.current.play().catch(() => {});
          } 
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
          else if (remoteVideoRef.current.paused) {
            // –ù–∞ –ø–∞—É–∑–µ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            remoteVideoRef.current.play().catch(() => {});
          }
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞
          else if (remoteVideoRef.current.srcObject !== remoteStreamRef.current) {
            // –ù–µ —Ç–æ—Ç –ø–æ—Ç–æ–∫ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            remoteVideoRef.current.srcObject = remoteStreamRef.current;
            remoteVideoRef.current.play().catch(() => {});
          }
        }
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        if (activeRef.current) {
          safeSetTimeout(checkRemoteVideoStatus, 1000);
        }
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      checkRemoteVideoStatus();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const handleRemoteVisibilityChange = () => {
        if (document.visibilityState === 'visible' && activeRef.current) {
          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(checkRemoteVideoStatus, 100);
        }
      };
      
      document.addEventListener('visibilitychange', handleRemoteVisibilityChange);
      
      return () => {
        document.removeEventListener('visibilitychange', handleRemoteVisibilityChange);
      };
    }
  }, [callActive, callType, safeSetTimeout]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      // –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ useWebRTC - –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
      activeRef.current = false;
      clearAllTimers();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      stopAllMediaTracks();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection
      if (peerRef.current) {
        try {
          console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
          peerRef.current.close();
          console.log('‚úÖ Peer connection –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ peer –≤ cleanup:', error);
        }
      }
      
              // –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã useWebRTC –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    };
  }, [clearAllTimers, stopAllMediaTracks]);

  return {
    start,
    endCall,
    toggleMic,
    toggleCam,
    micEnabled,
    camEnabled,
    callActive,
    connectionState,
    stop,
    createOffer,
    peerReady,
    forceReleaseMediaDevices // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  };
} 