import React, { createContext, useContext, useEffect, useState, useRef } from 'react';
import { toast } from 'react-hot-toast';
import useAuthStore from '../stores/authStore';
import api from '../api';

const CallsContext = createContext();

export const useCalls = () => {
  const context = useContext(CallsContext);
  if (!context) {
    throw new Error('useCalls must be used within a CallsProvider');
  }
  return context;
};

export const CallsProvider = ({ children }) => {
  const [incomingCall, setIncomingCall] = useState(null);
  const [outgoingCall, setOutgoingCall] = useState(null); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
  const [globalCallsWebSocket, setGlobalCallsWebSocket] = useState(null);
  const [connectionStatus, setConnectionStatus] = useState('disconnected'); // disconnected, connecting, connected
  const [reconnectAttempts, setReconnectAttempts] = useState(0);
  const { user } = useAuthStore();
  const reconnectTimeoutRef = useRef(null);
  const keepAliveIntervalRef = useRef(null);
  const isManualCloseRef = useRef(false); // –§–ª–∞–≥ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const clearTimeouts = () => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    if (keepAliveIntervalRef.current) {
      clearInterval(keepAliveIntervalRef.current);
      keepAliveIntervalRef.current = null;
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É WebSocket –¥–ª—è –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!user?.id) return;

    let currentWs = null; // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π WebSocket
    let isConnecting = false;
    
    const connectToGlobalCalls = () => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (isConnecting) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (currentWs && currentWs.readyState === WebSocket.OPEN) {
        return;
      }
      
      isConnecting = true;
      setConnectionStatus('connecting');
      
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const host = window.location.host;
      const wsUrl = `${protocol}//${host}/api/calls/ws/incoming/${user.id}?token=${localStorage.getItem('auth_token')}`;

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (currentWs) {
        isManualCloseRef.current = true;
        try {
          currentWs.close(1000, '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        }
      }

      const ws = new WebSocket(wsUrl);
      currentWs = ws; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      setGlobalCallsWebSocket(ws); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

              // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connectionTimeout = setTimeout(() => {
          if (ws.readyState === WebSocket.CONNECTING) {
            isConnecting = false;
            ws.close();
          }
        }, 20000);

      ws.onopen = () => {
        isConnecting = false;
        clearTimeout(connectionTimeout);
        setConnectionStatus('connected');
        setReconnectAttempts(0);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π keep-alive –µ—Å–ª–∏ –µ—Å—Ç—å
        if (keepAliveIntervalRef.current) {
          clearInterval(keepAliveIntervalRef.current);
        }
        
        // Keep-alive –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ (—É–º–µ–Ω—å—à–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É)
        keepAliveIntervalRef.current = setInterval(() => {
          if (currentWs && currentWs.readyState === WebSocket.OPEN) {
            currentWs.send(JSON.stringify({ type: 'keep-alive', timestamp: Date.now() }));
          } else {
            clearInterval(keepAliveIntervalRef.current);
            keepAliveIntervalRef.current = null;
          }
        }, 60000);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        if (reconnectAttempts > 1) {
          toast.success('üìû –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', {
            duration: 3000,
            position: 'bottom-right',
          });
        }
      };

      ws.onmessage = (event) => {
        try {
          if (!event || !event.data) return;
          
          const data = JSON.parse(event.data);
          if (!data || typeof data !== 'object' || !data.type) return;

          if (data.type === 'incoming_call' && data.call) {
            setIncomingCall(data.call);
            showBrowserNotification(data.call);
            playRingtone();
            
          } else if (data.type === 'call_accepted') {
            setIncomingCall(null);
            setOutgoingCall(null);
            stopRingtone();
          } else if (data.type === 'call_ended') {
            setIncomingCall(null);
            setOutgoingCall(null);
            stopRingtone();
          } else if (data.type === 'call_rejected') {
            setIncomingCall(null);
            setOutgoingCall(null);
            stopRingtone();
            
            toast.error('–ó–≤–æ–Ω–æ–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω', {
              duration: 3000,
              position: 'top-center',
            });
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      };

      ws.onclose = (event) => {
        // –£–±–∏—Ä–∞–µ–º keep-alive –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (keepAliveIntervalRef.current) {
          clearInterval(keepAliveIntervalRef.current);
          keepAliveIntervalRef.current = null;
        }
        
        isConnecting = false;
        setConnectionStatus('disconnected');
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (!isManualCloseRef.current && navigator.onLine && reconnectAttempts < 5) {
          const newReconnectAttempts = reconnectAttempts + 1;
          setReconnectAttempts(newReconnectAttempts);
          
          // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –≤ 60 —Å–µ–∫—É–Ω–¥
          const delay = Math.min(3000 * Math.pow(2, newReconnectAttempts - 1), 60000);
          
          reconnectTimeoutRef.current = setTimeout(() => {
            if (!isManualCloseRef.current) {
              connectToGlobalCalls();
            }
          }, delay);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        setTimeout(() => {
          isManualCloseRef.current = false;
        }, 1000);
      };

      ws.onerror = (error) => {
        isConnecting = false;
        setConnectionStatus('disconnected');
      };
    };

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cleanup = () => {
      isManualCloseRef.current = true;
      clearTimeouts();
      
      if (currentWs) {
        currentWs.close(1000, '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
        currentWs = null;
      }
      
      setGlobalCallsWebSocket(null);
      setConnectionStatus('disconnected');
    };

    // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connectToGlobalCalls();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
    const handleOnline = () => {
      if (!currentWs || currentWs.readyState !== WebSocket.OPEN) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        setReconnectAttempts(0);
        setTimeout(() => connectToGlobalCalls(), 2000);
      }
    };

    const handleOffline = () => {
      setConnectionStatus('disconnected');
    };

    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è
        if (!currentWs || currentWs.readyState !== WebSocket.OPEN) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
          if (reconnectAttempts < 3) {
            setTimeout(() => connectToGlobalCalls(), 2000);
          }
        }
      }
    };

    // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É - –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      cleanup();
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [user?.id, reconnectAttempts]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∏–Ω–≥—Ç–æ–Ω–∞
  const ringtoneAudioRef = useRef(null);
  const ringtoneTimeoutRef = useRef(null);
  
  const playRingtone = () => {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∏–Ω–≥—Ç–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
      stopRingtone();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∏–Ω–≥—Ç–æ–Ω–∞
      ringtoneAudioRef.current = new Audio('/sounds/ringtone.mp3');
      ringtoneAudioRef.current.loop = true;
      ringtoneAudioRef.current.volume = 1.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const playPromise = ringtoneAudioRef.current.play();
      
      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è)
            ringtoneTimeoutRef.current = setTimeout(() => {
              stopRingtone();
            }, 60000);
          })
          .catch((error) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            toast('üîä –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö! –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞', {
              icon: 'üìû',
              duration: 0,
              onClick: () => {
                if (ringtoneAudioRef.current) {
                  ringtoneAudioRef.current.play().catch(() => {});
                }
              },
              style: {
                background: '#EF4444',
                color: 'white',
                fontSize: '16px',
                fontWeight: 'bold',
                cursor: 'pointer',
              },
            });
          });
      }
      
          } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–∏–Ω–≥—Ç–æ–Ω–∞
    }
  };

  const stopRingtone = () => {
    if (ringtoneAudioRef.current) {
      ringtoneAudioRef.current.pause();
      ringtoneAudioRef.current.currentTime = 0;
      ringtoneAudioRef.current = null;
    }
    
    if (ringtoneTimeoutRef.current) {
      clearTimeout(ringtoneTimeoutRef.current);
      ringtoneTimeoutRef.current = null;
    }
  };

  // –ü–æ–∫–∞–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showBrowserNotification = async (call) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!('Notification' in window)) {
        return;
      }
      
      let permission = Notification.permission;
      
      if (permission === 'default') {
        permission = await Notification.requestPermission();
      }

      if (permission === 'granted') {
        const notification = new Notification('–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫', {
          body: `${call.call_type === 'video' ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫'} –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞`,
          icon: '/favicon.ico',
          tag: `call-${call.id}`,
          requireInteraction: true,
          silent: false
        });

        notification.onclick = () => {
          window.focus();
          window.location.href = `/consultations/${call.consultation_id}`;
          notification.close();
        };

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        setTimeout(() => notification.close(), 60000);
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }
  };

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞
  const acceptCall = async (callId) => {
    try {
      await api.post(`/api/calls/${callId}/accept`);
      setIncomingCall(null);
      stopRingtone();
      return true;
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞');
      return false;
    }
  };

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const rejectCall = async (callId) => {
    try {
              await api.post(`/api/calls/${callId}/reject`);
      
      setIncomingCall(null);
      setOutgoingCall(null); // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
      stopRingtone();
      return true;
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞');
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–∏–º–∏ –∑–≤–æ–Ω–∫–∞–º–∏
  const startOutgoingCall = (callData) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–≤–æ–Ω–∫–æ–º
    setOutgoingCall(null);
    setIncomingCall(null);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    setTimeout(() => {
      setOutgoingCall(callData);
    }, 50);
  };

  const endOutgoingCall = () => {
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω
    if (outgoingCall) {
      setOutgoingCall(null);
    }
  };

  const value = {
    incomingCall,
    outgoingCall,
    acceptCall,
    rejectCall,
    stopRingtone,
    connectionStatus,
    reconnectAttempts,
    startOutgoingCall,
    endOutgoingCall
  };

  return (
    <CallsContext.Provider value={value}>
      {children}
    </CallsContext.Provider>
  );
};