import React, { createContext, useContext, useEffect, useState, useRef } from 'react';
import { toast } from 'react-hot-toast';
import useAuthStore from '../stores/authStore';
import api from '../api';

const CallsContext = createContext();

export const useCalls = () => {
  const context = useContext(CallsContext);
  if (!context) {
    throw new Error('useCalls must be used within a CallsProvider');
  }
  return context;
};

export const CallsProvider = ({ children }) => {
  const [incomingCall, setIncomingCall] = useState(null);
  const [outgoingCall, setOutgoingCall] = useState(null); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
  const [globalCallsWebSocket, setGlobalCallsWebSocket] = useState(null);
  const [connectionStatus, setConnectionStatus] = useState('disconnected'); // disconnected, connecting, connected
  const [reconnectAttempts, setReconnectAttempts] = useState(0);
  const { user } = useAuthStore();
  const reconnectTimeoutRef = useRef(null);
  const keepAliveIntervalRef = useRef(null);
  const isManualCloseRef = useRef(false); // –§–ª–∞–≥ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const clearTimeouts = () => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    if (keepAliveIntervalRef.current) {
      clearInterval(keepAliveIntervalRef.current);
      keepAliveIntervalRef.current = null;
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É WebSocket –¥–ª—è –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
  useEffect(() => {
    if (!user?.id) return;

    let isActive = true;

    const connectToGlobalCalls = async () => {
      try {
        if (!isActive) return;

        setConnectionStatus('connecting');

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º webSocketService –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const webSocketService = (await import('../services/webSocketService')).default;

        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        const connection = await webSocketService.getCallsConnection(
          user.id,
          (event) => {
            if (!isActive) return;

            try {
              if (!event || !event.data) return;
              
              const data = JSON.parse(event.data);
              if (!data || typeof data !== 'object' || !data.type) return;

              if (data.type === 'incoming_call' && data.call) {
                setIncomingCall(data.call);
                showBrowserNotification(data.call);
                playRingtone();
                
              } else if (data.type === 'call_accepted') {
                setIncomingCall(null);
                setOutgoingCall(null);
                stopRingtone();
              } else if (data.type === 'call_ended') {
                setIncomingCall(null);
                setOutgoingCall(null);
                stopRingtone();
              } else if (data.type === 'call_rejected') {
                setIncomingCall(null);
                setOutgoingCall(null);
                stopRingtone();
                
                toast.error('–ó–≤–æ–Ω–æ–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω', {
                  duration: 3000,
                  position: 'top-center',
                });
              }
            } catch (error) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            }
          },
          (status, message) => {
            if (!isActive) return;

            setConnectionStatus(status);
            
            if (status === 'connected') {
              setReconnectAttempts(0);
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
              if (reconnectAttempts > 0) {
                toast.success('üìû –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', {
                  duration: 2000,
                  position: 'bottom-right',
                });
              }
            } else if (status === 'reconnecting') {
              const attempts = reconnectAttempts + 1;
              setReconnectAttempts(attempts);
            } else if (status === 'error') {
              console.warn('Calls WebSocket connection error:', message);
              setConnectionStatus('disconnected');
            }
          }
        );

        if (connection && isActive) {
          setGlobalCallsWebSocket(connection);
        }

      } catch (error) {
        if (isActive) {
          console.error('Failed to establish calls connection:', error);
          setConnectionStatus('disconnected');
        }
      }
    };

    connectToGlobalCalls();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
    const handleOnline = () => {
      if (isActive) {
        setTimeout(() => connectToGlobalCalls(), 1000);
      }
    };

    const handleOffline = () => {
      if (isActive) {
        setConnectionStatus('disconnected');
      }
    };

    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible' && isActive) {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        setTimeout(() => connectToGlobalCalls(), 500);
      }
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      isActive = false;
      clearTimeouts();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      if (user?.id) {
        import('../services/webSocketService').then(module => {
          const webSocketService = module.default;
          webSocketService.closeCallsConnection(user.id);
        });
      }
      
      setGlobalCallsWebSocket(null);
      setConnectionStatus('disconnected');
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [user?.id, reconnectAttempts]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∏–Ω–≥—Ç–æ–Ω–∞
  const ringtoneAudioRef = useRef(null);
  const ringtoneTimeoutRef = useRef(null);
  
  const playRingtone = () => {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∏–Ω–≥—Ç–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
      stopRingtone();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∏–Ω–≥—Ç–æ–Ω–∞
      ringtoneAudioRef.current = new Audio('/sounds/ringtone.mp3');
      ringtoneAudioRef.current.loop = true;
      ringtoneAudioRef.current.volume = 1.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const playPromise = ringtoneAudioRef.current.play();
      
      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è)
            ringtoneTimeoutRef.current = setTimeout(() => {
              stopRingtone();
            }, 60000);
          })
          .catch((error) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            toast('üîä –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö! –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞', {
              icon: 'üìû',
              duration: 0,
              onClick: () => {
                if (ringtoneAudioRef.current) {
                  ringtoneAudioRef.current.play().catch(() => {});
                }
              },
              style: {
                background: '#EF4444',
                color: 'white',
                fontSize: '16px',
                fontWeight: 'bold',
                cursor: 'pointer',
              },
            });
          });
      }
      
          } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–∏–Ω–≥—Ç–æ–Ω–∞
    }
  };

  const stopRingtone = () => {
    if (ringtoneAudioRef.current) {
      ringtoneAudioRef.current.pause();
      ringtoneAudioRef.current.currentTime = 0;
      ringtoneAudioRef.current = null;
    }
    
    if (ringtoneTimeoutRef.current) {
      clearTimeout(ringtoneTimeoutRef.current);
      ringtoneTimeoutRef.current = null;
    }
  };

  // –ü–æ–∫–∞–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showBrowserNotification = async (call) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!('Notification' in window)) {
        return;
      }
      
      let permission = Notification.permission;
      
      if (permission === 'default') {
        permission = await Notification.requestPermission();
      }

      if (permission === 'granted') {
        const notification = new Notification('–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫', {
          body: `${call.call_type === 'video' ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫'} –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞`,
          icon: '/favicon.ico',
          tag: `call-${call.id}`,
          requireInteraction: true,
          silent: false
        });

        notification.onclick = () => {
          window.focus();
          window.location.href = `/consultations/${call.consultation_id}`;
          notification.close();
        };

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        setTimeout(() => notification.close(), 60000);
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }
  };

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞
  const acceptCall = async (callId) => {
    try {
      await api.post(`/api/calls/${callId}/accept`);
      setIncomingCall(null);
      stopRingtone();
      return true;
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞');
      return false;
    }
  };

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const rejectCall = async (callId) => {
    try {
              await api.post(`/api/calls/${callId}/reject`);
      
      setIncomingCall(null);
      setOutgoingCall(null); // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
      stopRingtone();
      return true;
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞');
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–∏–º–∏ –∑–≤–æ–Ω–∫–∞–º–∏
  const startOutgoingCall = (callData) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–≤–æ–Ω–∫–æ–º
    setOutgoingCall(null);
    setIncomingCall(null);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    setTimeout(() => {
      setOutgoingCall(callData);
    }, 50);
  };

  const endOutgoingCall = () => {
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω
    if (outgoingCall) {
      setOutgoingCall(null);
    }
  };

  const value = {
    incomingCall,
    outgoingCall,
    acceptCall,
    rejectCall,
    stopRingtone,
    connectionStatus,
    reconnectAttempts,
    startOutgoingCall,
    endOutgoingCall
  };

  return (
    <CallsContext.Provider value={value}>
      {children}
    </CallsContext.Provider>
  );
};