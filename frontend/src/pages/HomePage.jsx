// frontend/src/pages/HomePage.jsx
import React, { useEffect, useState, useRef, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardBody, Button, Chip, ScrollShadow, Input, NextUIProvider, CardHeader, Skeleton, Avatar } from '@nextui-org/react';
import useAuthStore from '../stores/authStore';
import GoogleProfileForm from '../components/GoogleProfileForm';
import { ApplicationStatusTracker } from '../components/Notification';
import { motion } from 'framer-motion';
import { useTranslation } from '../components/LanguageSelector';
import OfflineMode from '../components/OfflineMode';
import api from '../api';
import { doctorsApi } from '../api';
import { Search, Calendar, Clock, ArrowRight, ChevronLeft, ChevronRight, Heart, Shield, Users, Star } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import MedicalLoader from '../components/MedicalLoader';

function HomePage() {
  const { t, currentLanguage } = useTranslation();
  const user = useAuthStore(state => state.user);
  const needsProfileUpdate = useAuthStore(state => state.needsProfileUpdate);
  const token = useAuthStore(state => state.token);
  const isAuthenticated = useAuthStore(state => state.isAuthenticated);
  const isLoading = useAuthStore(state => state.isLoading);
  const navigate = useNavigate();
  const authError = useAuthStore(state => state.error);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ offline
  const [isOfflineMode, setIsOfflineMode] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
  const [healthNews, setHealthNews] = useState([]);
  const [translatedNews, setTranslatedNews] = useState([]);
  const [loadingNews, setLoadingNews] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [searchQuery, setSearchQuery] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–∞—á–µ–π
  const [doctorStats, setDoctorStats] = useState({});
  const [loadingStats, setLoadingStats] = useState(true);
  
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (authError) {
      navigate('/login');
    }
  }, [authError, navigate]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∂–∏–º offline
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã HTML –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend)
    if (user && typeof user === 'string' && user.includes('<!doctype html>')) {
      setIsOfflineMode(true);
    } else if (user && typeof user === 'object' && Object.keys(user).length > 0) {
      setIsOfflineMode(false);
    }
  }, [user, isAuthenticated]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—á–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    fetchNews();
    fetchDoctorStats();
  }, []);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞ (API –≤–µ—Ä–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã)
  useEffect(() => {
    fetchNews();
  }, [currentLanguage]);

  const fetchNews = async () => {
    try {
      setLoadingNews(true);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      const response = await api.get(`/api/news/published?featured_only=true&limit=4&language=ru`);
      setHealthNews(response.data);
      setTranslatedNews(response.data);
    } catch (error) {
      setHealthNews([]);
      setTranslatedNews([]);
    } finally {
      setLoadingNews(false);
    }
  };

  const fetchDoctorStats = async () => {
    try {
      setLoadingStats(true);
      const stats = await doctorsApi.getSpecializationsStats();
      const statsMap = {};
      stats.forEach(stat => {
        statsMap[stat.specialization] = stat.count;
      });
      setDoctorStats(statsMap);
    } catch (error) {
      setDoctorStats({});
    } finally {
      setLoadingStats(false);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend
  const handleRetryConnection = async () => {
    setIsOfflineMode(false);
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const { initializeAuth } = useAuthStore.getState();
      await initializeAuth();
    } catch (error) {
      setIsOfflineMode(true);
    }
  };
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (authError) {
    return null;
  }
  
  // –ï—Å–ª–∏ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Ä–µ–∂–∏–º
  if (isOfflineMode && isAuthenticated) {
    return <OfflineMode user={user} onRetry={handleRetryConnection} />;
  }
  
  // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  if (needsProfileUpdate) {
    const handleProfileCompletion = (userData) => {
      // –Ø–≤–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ needsProfileUpdate
      useAuthStore.setState({ needsProfileUpdate: false });
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—à–µ–Ω
        const currentNeedsUpdate = useAuthStore.getState().needsProfileUpdate;
        
        if (!currentNeedsUpdate) {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—É
          window.location.href = '/';
        } else {
          // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Ñ–ª–∞–≥ –Ω–µ —Å–±—Ä–æ—Å–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
          window.location.reload();
        }
      }, 500);
    };
    
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-blue-50 to-indigo-50 py-12 px-4">
        <div className="w-full max-w-2xl">
          <GoogleProfileForm onCompleted={handleProfileCompletion} />
        </div>
      </div>
    );
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
  if (user?.role === 'admin') {
    navigate('/admin_control_panel_52x9a8');
    return null;
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è —Ö–µ–¥–µ—Ä–∞
  const mainSections = [
    {
      icon: 'üë©‚Äç‚öïÔ∏è',
      title: t('doctors'),
      description: t('searchSpecialists'),
      action: () => navigate('/search-doctors')
    },
    {
      icon: 'üè•',
      title: t('clinics'),
      description: t('medicalCenters'),
      action: () => navigate('/clinics')
    },
    {
      icon: 'üìã',
      title: t('services'),
      description: t('medicalServices'),
      action: () => navigate('/search-doctors')
    },
    {
      icon: 'üìÖ',
      title: t('appointment'),
      description: t('onlineAppointment'),
      action: () => navigate('/search-doctors')
    },
    {
      icon: 'üì∞',
      title: t('news'),
      description: t('healthNews'),
      action: () => {
        const newsSection = document.getElementById('news-section');
        newsSection?.scrollIntoView({ behavior: 'smooth' });
      }
    },
    {
      icon: 'üí¨',
      title: t('consultation'),
      description: t('onlineHelp'),
      action: () => navigate('/search-doctors')
    }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const getDoctorCount = (specialization) => {
    const count = doctorStats[specialization] || 0;
    return `${count}+ ${t('doctorsCount')}`;
  };

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  const popularDirections = [
    { 
      name: t('cardiology'), 
      icon: '‚ù§Ô∏è', 
      description: t('heartDiseases'), 
      specialists: getDoctorCount('–ö–∞—Ä–¥–∏–æ–ª–æ–≥'),
      backendSpecialization: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥'
    },
    { 
      name: t('neurology'), 
      icon: 'üß†', 
      description: t('nervousSystem'), 
      specialists: getDoctorCount('–ù–µ–≤—Ä–æ–ª–æ–≥'),
      backendSpecialization: '–ù–µ–≤—Ä–æ–ª–æ–≥'
    },
    { 
      name: t('therapy'), 
      icon: 'ü©∫', 
      description: t('generalMedicine'), 
      specialists: getDoctorCount('–¢–µ—Ä–∞–ø–µ–≤—Ç'),
      backendSpecialization: '–¢–µ—Ä–∞–ø–µ–≤—Ç'
    },
    { 
      name: t('dentistry'), 
      icon: 'ü¶∑', 
      description: t('dentalHealth'), 
      specialists: getDoctorCount('–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥'),
      backendSpecialization: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥'
    },
    { 
      name: t('gynecology'), 
      icon: 'üë©‚Äç‚öïÔ∏è', 
      description: t('womensHealth'), 
      specialists: getDoctorCount('–ì–∏–Ω–µ–∫–æ–ª–æ–≥'),
      backendSpecialization: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥'
    },
    { 
      name: t('ophthalmology'), 
      icon: 'üëÅÔ∏è', 
      description: t('eyeDiseases'), 
      specialists: getDoctorCount('–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥'),
      backendSpecialization: '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥'
    }
  ];

  // –¢–æ–ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  const topSpecialties = [
    { name: t('cardiologist'), icon: '‚ù§Ô∏è', description: t('heartAndVessels') },
    { name: t('neurologist'), icon: 'üß†', description: t('nervousSystemShort') },
    { name: t('ophthalmologist'), icon: 'üëÅÔ∏è', description: t('eyeDiseases') },
    { name: t('gynecologist'), icon: 'üë©‚Äç‚öïÔ∏è', description: t('womensHealth') },
    { name: t('dermatologist'), icon: 'üåü', description: t('skinDiseases') },
    { name: t('endocrinologist'), icon: 'üî¨', description: t('hormonalDisorders') },
    { name: t('pediatrician'), icon: 'üë∂', description: t('childHealth') },
    { name: t('urologist'), icon: 'üî¨', description: t('genitourinarySystem') },
    { name: t('psychiatrist'), icon: 'üßò', description: t('mentalHealth') },
    { name: t('oncologist'), icon: 'üéóÔ∏è', description: t('oncologyTreatment') },
    { name: t('orthopedist'), icon: 'ü¶¥', description: t('musculoskeletalSystem') },
    { name: t('otolaryngologist'), icon: 'üëÇ', description: t('earNoseThroat') },
    { name: t('gastroenterologist'), icon: 'ü´Å', description: t('digestiveSystem') },
    { name: t('pulmonologist'), icon: 'ü´Å', description: t('lungDiseases') },
    { name: t('proctologist'), icon: '‚öïÔ∏è', description: t('rectalDiseases') }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–æ–≤–æ—Å—Ç–∏
  const formatNewsDate = (dateString) => {
    const date = new Date(dateString);
    const localeMap = {
      'ru': 'ru-RU',
      'uz': 'en-US', // –£–∑–±–µ–∫—Å–∫–∏–π locale –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      'en': 'en-US'
    };
    const locale = localeMap[currentLanguage] || 'ru-RU';
    
    return date.toLocaleDateString(locale, {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
  const handleSearch = () => {
    if (searchQuery.trim()) {
      navigate(`/search-doctors?search=${encodeURIComponent(searchQuery)}`);
    }
  };

  // –õ–æ–≥–∏–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è
  const [windowWidth, setWindowWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 1024);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  const getItemsPerSlide = () => {
    if (windowWidth < 768) return 2; // –ú–æ–±–∏–ª—å–Ω—ã–µ - 2 –∫–∞—Ä—Ç–æ—á–∫–∏
    if (windowWidth < 1024) return 3; // –ü–ª–∞–Ω—à–µ—Ç—ã - 3 –∫–∞—Ä—Ç–æ—á–∫–∏
    return 4; // Desktop - 4 –∫–∞—Ä—Ç–æ—á–∫–∏
  };
  
  const itemsPerSlide = getItemsPerSlide();
  const totalSlides = Math.ceil(topSpecialties.length / itemsPerSlide);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
      setCurrentSlide(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏
  useEffect(() => {
    if (isPaused || totalSlides <= 1) return;

    const interval = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % totalSlides);
    }, 4000); // –°–º–µ–Ω–∞ —Å–ª–∞–π–¥–∞ –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã

    return () => clearInterval(interval);
  }, [isPaused, totalSlides]);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏
  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % totalSlides);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + totalSlides) % totalSlides);
  };

  const goToSlide = (index) => {
    setCurrentSlide(index);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∏–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–∞–π–¥–∞
  const getVisibleSpecialties = () => {
    const startIndex = currentSlide * itemsPerSlide;
    return topSpecialties.slice(startIndex, startIndex + itemsPerSlide);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50/30 via-white to-green-50/20 relative overflow-hidden">
      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <div className="absolute top-0 left-0 w-full h-full z-0 opacity-60">
        <motion.div 
          className="absolute top-20 left-[10%] w-64 h-64 rounded-full bg-gradient-to-r from-blue-300/15 to-indigo-300/15"
          animate={{
            y: [0, 20, 0],
            scale: [1, 1.05, 1],
            rotate: [0, 5, 0, -5, 0]
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
        
        <motion.div 
          className="absolute bottom-20 right-[10%] w-80 h-80 rounded-full bg-gradient-to-r from-green-300/15 to-teal-300/15"
          animate={{
            y: [0, -25, 0],
            scale: [1, 1.05, 1],
            rotate: [0, -5, 0, 5, 0]
          }}
          transition={{
            duration: 10,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
        
        <motion.div 
          className="absolute top-1/3 right-[15%] w-40 h-40 rounded-full bg-gradient-to-r from-indigo-300/15 to-blue-300/15"
          animate={{
            y: [0, 15, 0],
            scale: [1, 1.08, 1],
            rotate: [0, 10, 0]
          }}
          transition={{
            duration: 6,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
        
        <motion.div 
          className="absolute bottom-1/4 left-[20%] w-56 h-56 rounded-full bg-gradient-to-r from-cyan-300/15 to-teal-300/15"
          animate={{
            y: [0, -15, 0],
            scale: [1, 1.03, 1],
            rotate: [0, -8, 0]
          }}
          transition={{
            duration: 12,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 relative z-10">
        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–æ–∫ */}
        <ApplicationStatusTracker />

        {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –ü–æ–∏—Å–∫ –∏ –∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ */}
        <motion.div 
          className="text-center mb-12"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
          <div className="max-w-2xl mx-auto mb-8">
            <div className="relative">
              <Input
                size="lg"
                placeholder={t('searchDoctorsClinicsServices')}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
                startContent={
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                }
                endContent={
                  <Button 
                    color="primary" 
                    className="bg-gradient-to-r from-blue-600 to-indigo-600"
                    onPress={handleSearch}
                  >
                    {t('findButton')}
                  </Button>
                }
                className="text-lg"
              />
            </div>
          </div>

          {/* –ò–∫–æ–Ω–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ */}
          <div className="grid grid-cols-3 md:grid-cols-6 gap-4 max-w-4xl mx-auto">
            {mainSections.map((section, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 + (index * 0.05), duration: 0.5 }}
                whileHover={{ scale: 1.05, y: -2 }}
                className="cursor-pointer"
                onClick={section.action}
              >
                <Card className="bg-white/80 backdrop-blur-sm hover:bg-white transition-all duration-300 border-0 shadow-md hover:shadow-lg">
                  <CardBody className="p-4 text-center">
                    <div className="text-3xl mb-2">{section.icon}</div>
                    <h3 className="font-semibold text-gray-800 text-sm mb-1">{section.title}</h3>
                    <p className="text-xs text-gray-600">{section.description}</p>
                  </CardBody>
                </Card>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–ª–æ–∫ - –ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä */}
        <motion.div 
          className="mb-16"
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3, duration: 0.8 }}
        >
          <Card className="bg-gradient-to-r from-blue-600 to-indigo-600 border-0 shadow-2xl overflow-hidden relative">
            {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞–Ω–Ω–µ—Ä–∞ */}
            <motion.div 
              className="absolute top-0 right-0 w-40 h-40 rounded-full bg-white/10"
              animate={{
                scale: [1, 1.1, 1],
                rotate: [0, 10, 0]
              }}
              transition={{
                duration: 6,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
            <motion.div 
              className="absolute bottom-0 left-0 w-32 h-32 rounded-full bg-white/5"
              animate={{
                scale: [1, 1.2, 1],
                rotate: [0, -15, 0]
              }}
              transition={{
                duration: 8,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
            
            <CardBody className="p-8 md:p-12 text-white relative z-10">
              <div className="max-w-4xl mx-auto text-center">
                <motion.h1 
                  className="text-4xl md:text-6xl font-bold mb-6 leading-tight"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.5, duration: 0.8 }}
                >
                  {t('yourHealthInReliableHands')}
                </motion.h1>
                
                <motion.p 
                  className="text-xl md:text-2xl mb-8 text-blue-100 leading-relaxed"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.7, duration: 0.8 }}
                >
                  {t('modernMedicalPlatform')}
                </motion.p>
                
                <motion.div 
                  className="flex flex-col sm:flex-row gap-4 justify-center"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.9, duration: 0.8 }}
                >
                  <Button 
                    size="lg" 
                    className="bg-white text-blue-600 font-semibold hover:bg-blue-50 shadow-lg text-lg px-8 py-6"
                    onPress={() => navigate('/search-doctors')}
                  >
                    üîç {t('findDoctorButton')}
                  </Button>
                  <Button 
                    size="lg" 
                    variant="bordered" 
                    className="border-white text-white hover:bg-white/10 font-semibold text-lg px-8 py-6"
                    onPress={() => navigate('/search-doctors')}
                  >
                    üìÖ {t('scheduleAppointmentButton')}
                  </Button>
                </motion.div>

                {/* –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–≤–µ—Ä–∏—è */}
                <motion.div 
                  className="mt-8 flex flex-wrap justify-center gap-6 text-blue-100"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 1.1, duration: 0.8 }}
                >
                  <div className="flex items-center gap-2">
                    <span className="text-green-400">‚úì</span>
                    <span className="text-sm">{t('certifiedDoctors')}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-green-400">‚úì</span>
                    <span className="text-sm">{t('dataSecurity')}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-green-400">‚úì</span>
                    <span className="text-sm">{t('support247')}</span>
                  </div>
                </motion.div>
              </div>
            </CardBody>
          </Card>
        </motion.div>

        {/* –°–µ–∫—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π */}
        <motion.div 
          className="mb-16"
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5, duration: 0.6 }}
        >
          <div className="flex justify-between items-center mb-8">
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-2">{t('popularDirections')}</h2>
              <p className="text-gray-600">{t('chooseSpecialization')}</p>
            </div>
            <Button 
              variant="ghost" 
              className="text-blue-600 hover:text-blue-700"
              onPress={() => navigate('/search-doctors')}
              endContent={
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              }
            >
              {t('allDirections')}
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {popularDirections.map((direction, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6 + (index * 0.1), duration: 0.5 }}
                whileHover={{ y: -5, scale: 1.02 }}
                className="cursor-pointer"
                onClick={() => navigate('/search-doctors')}
              >
                <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300 h-full">
                  <CardBody className="p-6">
                    <div className="flex items-start gap-4">
                      <div className="text-4xl">{direction.icon}</div>
                      <div className="flex-1">
                        <h3 className="font-semibold text-lg text-gray-900 mb-2">{direction.name}</h3>
                        <p className="text-gray-600 text-sm mb-3">{direction.description}</p>
                        <Chip size="sm" color="primary" variant="flat" className="text-xs">
                          {loadingStats ? `... ${t('doctorsCount')}` : direction.specialists}
                        </Chip>
                      </div>
                    </div>
                  </CardBody>
                </Card>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* –°–µ–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–¥–æ—Ä–æ–≤—å—è */}
        <motion.div 
          id="news-section"
          className="mb-16"
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.7, duration: 0.6 }}
        >
          <div className="flex justify-between items-center mb-8">
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-2">{t('healthMedicineNews')}</h2>
              <p className="text-gray-600">{t('currentArticlesResearch')}</p>
            </div>
            <Button 
              variant="ghost" 
              className="text-blue-600 hover:text-blue-700"
              endContent={
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              }
            >
              {t('allNews')}
            </Button>
          </div>

          {loadingNews ? (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-500">{t('loadingNews')}</p>
            </div>
          ) : translatedNews.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {translatedNews.map((news, index) => (
                <motion.div
                  key={news.id}
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.8 + (index * 0.1), duration: 0.5 }}
                  whileHover={{ scale: 1.02, y: -5 }}
                  className="cursor-pointer"
                  onClick={() => navigate(`/news/${news.id}`)}
                >
                  <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300 h-full">
                    <CardBody className="p-0">
                      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ */}
                      {news.image_path ? (
                        <div className="h-48 overflow-hidden">
                          <img
                            src={`${import.meta.env.VITE_API_URL || 'https://healzy.uz'}${news.image_path}`}
                            alt={news.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                      ) : (
                        <div className="h-48 bg-gradient-to-br from-blue-100 to-indigo-100 flex items-center justify-center">
                          <span className="text-4xl">üì∞</span>
                        </div>
                      )}
                      
                      <div className="p-4">
                                                  <div className="flex justify-between items-center mb-3">
                            <Chip size="sm" color="primary" variant="flat">
                              {news.category}
                            </Chip>
                          <span className="text-xs text-gray-500">
                            {formatNewsDate(news.published_at || news.created_at)}
                          </span>
                        </div>
                        
                        <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2 text-sm leading-tight">
                          {news.title}
                        </h3>
                        
                        <p className="text-sm text-gray-600 line-clamp-3 leading-relaxed mb-3">
                          {news.summary}
                        </p>
                        
                        <Button 
                          size="sm" 
                          variant="flat" 
                          color="primary" 
                          className="w-full"
                          onPress={(e) => {
                            e.stopPropagation();
                            navigate(`/news/${news.id}`);
                          }}
                        >
                          {t('readButton')}
                        </Button>
                      </div>
                    </CardBody>
                  </Card>
                </motion.div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üì∞</div>
              <h3 className="text-xl font-semibold text-gray-600 mb-2">{t('newsWillAppearSoon')}</h3>
              <p className="text-gray-500">{t('workingOnMedicalNews')}</p>
            </div>
          )}
        </motion.div>

        {/* –°–µ–∫—Ü–∏—è –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ */}
        <motion.div 
          className="mb-16"
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.9, duration: 0.6 }}
        >
          <div className="flex justify-between items-center mb-8">
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-2">{t('ourSpecialists')}</h2>
              <div className="flex items-center gap-2">
                <p className="text-gray-600">{t('top15Specializations')}</p>
                {totalSlides > 1 && (
                  <div className="hidden md:flex items-center text-gray-400 text-sm">
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    <span className="text-xs">{t('autoSlide')}</span>
                  </div>
                )}
              </div>
            </div>
            <Button 
              variant="ghost" 
              className="text-blue-600 hover:text-blue-700"
              onPress={() => navigate('/search-doctors')}
              endContent={
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              }
            >
              {t('allDoctors')}
            </Button>
          </div>

          {/* –ö–∞—Ä—É—Å–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ */}
          <div 
            className="relative"
            onMouseEnter={() => setIsPaused(true)}
            onMouseLeave={() => setIsPaused(false)}
          >
            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            {totalSlides > 1 && (
              <>
                <button
                  onClick={prevSlide}
                  className="absolute left-0 top-1/2 -translate-y-1/2 z-20 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-300 backdrop-blur-sm border border-gray-200"
                  aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥"
                >
                  <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
                
                <button
                  onClick={nextSlide}
                  className="absolute right-0 top-1/2 -translate-y-1/2 z-20 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-300 backdrop-blur-sm border border-gray-200"
                  aria-label="–°–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥"
                >
                  <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </>
            )}
            
            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–æ–≤ */}
            <div className="overflow-hidden rounded-xl">
              <motion.div 
                className="flex transition-transform duration-500 ease-in-out"
                animate={{ x: `-${currentSlide * 100}%` }}
              >
                {Array.from({ length: totalSlides }, (_, slideIndex) => (
                  <div key={slideIndex} className="w-full flex-shrink-0">
                    <div className={`grid gap-4 p-4 ${
                      itemsPerSlide === 2 ? 'grid-cols-2' : 
                      itemsPerSlide === 3 ? 'grid-cols-3' : 
                      'grid-cols-4'
                    }`}>
                      {topSpecialties
                        .slice(slideIndex * itemsPerSlide, (slideIndex + 1) * itemsPerSlide)
                        .map((specialty, index) => (
                        <motion.div
                          key={slideIndex * itemsPerSlide + index}
                          initial={{ opacity: 0, scale: 0.9 }}
                          animate={{ opacity: 1, scale: 1 }}
                          transition={{ delay: index * 0.1, duration: 0.4 }}
                          whileHover={{ scale: 1.05, y: -3 }}
                          className="cursor-pointer"
                          onClick={() => navigate('/search-doctors')}
                        >
                          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-md hover:shadow-lg transition-all duration-300 h-36">
                            <CardBody className="p-3 text-center flex flex-col items-center justify-center">
                              <div className="text-2xl mb-2">{specialty.icon}</div>
                              <h4 className="font-semibold text-gray-900 text-xs mb-1 leading-tight text-center line-clamp-2">
                                {specialty.name}
                              </h4>
                              <p className="text-xs text-gray-600 line-clamp-2 text-center">
                                {specialty.description}
                              </p>
                            </CardBody>
                          </Card>
                        </motion.div>
                      ))}
                    </div>
                  </div>
                ))}
              </motion.div>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
            {totalSlides > 1 && (
              <div className="flex justify-center mt-6 gap-2">
                {Array.from({ length: totalSlides }, (_, index) => (
                  <button
                    key={index}
                    onClick={() => goToSlide(index)}
                    className={`w-3 h-3 rounded-full transition-all duration-300 ${
                      index === currentSlide 
                        ? 'bg-blue-600 scale-110' 
                        : 'bg-gray-300 hover:bg-gray-400'
                    }`}
                    aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–∞–π–¥—É ${index + 1}`}
                  />
                ))}
              </div>
            )}
          </div>
          

        </motion.div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */}
        <motion.div 
          className="text-center mb-16"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.2, duration: 0.6 }}
        >
          <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-0 shadow-lg">
            <CardBody className="p-8">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">
                {t('whyChooseOurPlatform')}
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                <motion.div 
                  className="text-center"
                  whileHover={{ y: -5 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto mb-4 text-white text-2xl">
                    üîç
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">
                    {t('convenientDoctorSearchNew')}
                  </h4>
                  <p className="text-gray-600 text-sm">
                    {t('findSpecialistsByRating')}
                  </p>
                </motion.div>
                
                <motion.div 
                  className="text-center"
                  whileHover={{ y: -5 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4 text-white text-2xl">
                    üåç
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">
                    {t('onlineConsultationsNew')}
                  </h4>
                  <p className="text-gray-600 text-sm">
                    {t('getMedicalHelpAnywhere')}
                  </p>
                </motion.div>
                
                <motion.div 
                  className="text-center"
                  whileHover={{ y: -5 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4 text-white text-2xl">
                    üîí
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">
                    {t('dataSecurityNew')}
                  </h4>
                  <p className="text-gray-600 text-sm">
                    {t('medicalDataProtection')}
                  </p>
                </motion.div>
              </div>
            </CardBody>
          </Card>
        </motion.div>
      </div>
    </div>
  );
}

export default HomePage;