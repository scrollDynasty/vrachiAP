#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –¥–ª—è Healzy.uz
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π 24/7

–í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ENABLE_AI=false –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ AI —Ñ—É–Ω–∫—Ü–∏–∏ –î–û –∏–º–ø–æ—Ä—Ç–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
ENABLE_AI = os.getenv("ENABLE_AI", "false").lower() == "true"

if not ENABLE_AI:
    print("üõë AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (ENABLE_AI=false)")
    print("üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENABLE_AI=true –≤ .env —Ñ–∞–π–ª–µ")
    print("üîÑ –°–∫—Ä–∏–ø—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(0)

# –ò–º–ø–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ AI –≤–∫–ª—é—á–µ–Ω
import asyncio
import signal
import argparse
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from continuous_learning_service import ContinuousLearningService
    from ai_service.data_collector import RealDataCollector
    from ai_service.model_trainer import ModelTrainer
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ AI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("üîÑ –°–∫—Ä–∏–ø—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AILearningManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI
    """
    
    def __init__(self):
        self.service = None
        self.is_running = False
        
    async def start_continuous_learning(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –¥–ª—è Healzy.uz")
            logger.info("=" * 70)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            self.service = ContinuousLearningService()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            result = await self.service.collect_data_batch()
            
            if result.get('success'):
                logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {result.get('collected', 0)} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é
            logger.info("üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é...")
            training_result = await self.service.train_models()
            
            if training_result.get('success'):
                logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã!")
                accuracies = training_result.get('accuracies', {})
                logger.info(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: {accuracies.get('symptom', 0):.2%}")
                logger.info(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {accuracies.get('disease', 0):.2%}")
            else:
                logger.info("‚ÑπÔ∏è –û–±—É—á–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –¥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º
            logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
            logger.info("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:")
            logger.info("   üåê –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞")
            logger.info("   üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
            logger.info("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–∞–∂–¥—ã–π —á–∞—Å")
            logger.info("   üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, self._signal_handler)
            signal.signal(signal.SIGTERM, self._signal_handler)
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            self.is_running = True
            self.service.start()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        if self.service:
            self.service.stop()
        self.is_running = False
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def manual_training(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            logger.info("üß† –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
            
            trainer = ModelTrainer()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            data_loaded = trainer.load_training_data("database")
            
            if not data_loaded:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ...")
                data_loaded = trainer.load_training_data("synthetic")
                
                if not data_loaded:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                    return False
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
            result = await trainer.train_all_models()
            
            if result.get('success'):
                logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω—ã!")
                logger.info(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: {result['models']['symptom_classifier'].get('accuracy', 0):.2%}")
                logger.info(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {result['models']['disease_classifier'].get('accuracy', 0):.2%}")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: {e}")
            return False
    
    async def manual_data_collection(self, limit: int = 100):
        """–†—É—á–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üåê –†—É—á–Ω–æ–π —Å–±–æ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç: {limit})...")
            
            collector = RealDataCollector()
            result = await collector.collect_all_sources(limit=limit)
            
            if result.get('success'):
                logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {result.get('total_collected', 0)} –∑–∞–ø–∏—Å–µ–π")
                logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result.get('sources_processed', 0)}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {result.get('error', 'Unknown error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–±–æ—Ä–µ: {e}")
            return False
    
    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI")
        print("=" * 50)
        
        if self.service:
            status = self.service.get_status()
            
            print(f"üîÑ –°—Ç–∞—Ç—É—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if status['is_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            print(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {status['scheduled_jobs']}")
            
            stats = status['stats']
            print(f"üìà –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {stats['total_data_collected']}")
            print(f"üîÑ –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: {stats['total_training_sessions']}")
            print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±–æ—Ä: {stats['last_data_collection']}")
            print(f"üß† –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ: {stats['last_training']}")
            
            if stats['model_accuracy_history']:
                last_accuracy = stats['model_accuracy_history'][-1]
                print(f"üìä –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:")
                print(f"   –°–∏–º–ø—Ç–æ–º—ã: {last_accuracy['symptom_accuracy']:.2%}")
                print(f"   –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {last_accuracy['disease_accuracy']:.2%}")
            
            config = status['config']
            print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(f"   –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ {config['data_collection']['interval_hours']} —á–∞—Å–æ–≤")
            print(f"   –û–±—É—á–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {config['model_training']['interval_hours']} —á–∞—Å–æ–≤")
            print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {config['data_collection']['batch_size']}")
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –¥–ª—è Healzy.uz')
    parser.add_argument('command', choices=['start', 'train', 'collect', 'status'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--limit', type=int, default=100, 
                       help='–õ–∏–º–∏—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (default: 100)')
    
    args = parser.parse_args()
    
    manager = AILearningManager()
    
    try:
        if args.command == 'start':
            print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
            print("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            await manager.start_continuous_learning()
            
        elif args.command == 'train':
            print("üß† –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
            success = await manager.manual_training()
            sys.exit(0 if success else 1)
            
        elif args.command == 'collect':
            print(f"üåê –†—É—á–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç: {args.limit})...")
            success = await manager.manual_data_collection(args.limit)
            sys.exit(0 if success else 1)
            
        elif args.command == 'status':
            manager.service = ContinuousLearningService()
            manager.status()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        manager.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 