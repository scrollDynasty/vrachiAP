#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏
"""

import asyncio
import schedule
import time
import logging
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
import threading
from concurrent.futures import ThreadPoolExecutor

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è AI —Å–∏—Å—Ç–µ–º—ã
from ai_service.data_collector import RealDataCollector
from ai_service.model_trainer import ModelTrainer
from ai_service.inference import MedicalAI
from models import get_db, AITrainingData, AIModel, AIModelTraining

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('continuous_learning.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ContinuousLearningService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self, config_path: str = "learning_config.json"):
        self.config_path = config_path
        self.config = self._load_config()
        self.is_running = False
        self.data_collector = RealDataCollector()
        self.model_trainer = ModelTrainer()
        self.executor = ThreadPoolExecutor(max_workers=2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_data_collected': 0,
            'total_training_sessions': 0,
            'last_data_collection': None,
            'last_training': None,
            'model_accuracy_history': []
        }
        
        logger.info("ü§ñ –°–µ—Ä–≤–∏—Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            'data_collection': {
                'interval_hours': 2,
                'batch_size': 100,
                'max_daily_requests': 1000,
                'enabled': True
            },
            'model_training': {
                'interval_hours': 6,
                'min_new_data_for_training': 50,
                'accuracy_threshold': 0.8,
                'enabled': True
            },
            'monitoring': {
                'alert_on_accuracy_drop': True,
                'accuracy_drop_threshold': 0.1,
                'log_stats_interval_hours': 1
            },
            'data_sources': {
                'medical_sites': True,
                'scientific_papers': True,
                'health_forums': False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                'wikipedia': True
            }
        }
        
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å default –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    return {**default_config, **config}
            else:
                self._save_config(default_config)
                return default_config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config
    
    def _save_config(self, config: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    async def collect_data_batch(self) -> Dict:
        """–°–±–æ—Ä –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üåê –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            batch_size = self.config['data_collection']['batch_size']
            result = await self.data_collector.collect_all_sources(limit=batch_size)
            
            if result.get('success'):
                collected_count = result.get('total_collected', 0)
                self.stats['total_data_collected'] += collected_count
                self.stats['last_data_collection'] = datetime.now()
                
                logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {collected_count} –Ω–æ–≤—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
                return {'success': True, 'collected': collected_count}
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return {'success': False, 'error': result.get('error', 'Unknown error')}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {'success': False, 'error': str(e)}
    
    async def train_models(self) -> Dict:
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("üß† –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            with next(get_db()) as db:
                total_data = db.query(AITrainingData).count()
                
            min_data = self.config['model_training']['min_new_data_for_training']
            
            if total_data < min_data:
                logger.info(f"‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–µ—Å—Ç—å {total_data}, –Ω—É–∂–Ω–æ {min_data})")
                return {'success': False, 'reason': 'insufficient_data'}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∞–µ–º
            self.model_trainer.load_training_data("database")
            result = await self.model_trainer.train_all_models()
            
            if result.get('success'):
                self.stats['total_training_sessions'] += 1
                self.stats['last_training'] = datetime.now()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏
                symptom_accuracy = result['models']['symptom_classifier'].get('accuracy', 0)
                disease_accuracy = result['models']['disease_classifier'].get('accuracy', 0)
                
                self.stats['model_accuracy_history'].append({
                    'timestamp': datetime.now().isoformat(),
                    'symptom_accuracy': symptom_accuracy,
                    'disease_accuracy': disease_accuracy
                })
                
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: {symptom_accuracy:.2%}")
                logger.info(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {disease_accuracy:.2%}")
                
                return {'success': True, 'accuracies': {
                    'symptom': symptom_accuracy,
                    'disease': disease_accuracy
                }}
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π")
                return {'success': False, 'error': result.get('error', 'Training failed')}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return {'success': False, 'error': str(e)}
    
    def setup_schedules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        if self.config['data_collection']['enabled']:
            schedule.every(self.config['data_collection']['interval_hours']).hours.do(
                self._run_async_job, self.collect_data_batch
            )
            logger.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ {self.config['data_collection']['interval_hours']} —á–∞—Å–æ–≤")
        
        if self.config['model_training']['enabled']:
            schedule.every(self.config['model_training']['interval_hours']).hours.do(
                self._run_async_job, self.train_models
            )
            logger.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—É—á–µ–Ω–∏—è: –∫–∞–∂–¥—ã–µ {self.config['model_training']['interval_hours']} —á–∞—Å–æ–≤")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        schedule.every(self.config['monitoring']['log_stats_interval_hours']).hours.do(
            self.log_stats
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        schedule.every().day.at("03:00").do(self.cleanup_old_data)
    
    def _run_async_job(self, job_func):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        try:
            asyncio.run(job_func())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
    
    def log_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
        logger.info(f"   üìà –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {self.stats['total_data_collected']}")
        logger.info(f"   üîÑ –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: {self.stats['total_training_sessions']}")
        logger.info(f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {self.stats['last_data_collection']}")
        logger.info(f"   üß† –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ: {self.stats['last_training']}")
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        if self.stats['model_accuracy_history']:
            last_accuracy = self.stats['model_accuracy_history'][-1]
            logger.info(f"   üìä –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {last_accuracy['symptom_accuracy']:.2%} (—Å–∏–º–ø—Ç–æ–º—ã), {last_accuracy['disease_accuracy']:.2%} (–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è)")
    
    def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=30)
            
            with next(get_db()) as db:
                old_data = db.query(AITrainingData).filter(
                    AITrainingData.created_at < cutoff_date,
                    AITrainingData.is_processed == True
                ).count()
                
                if old_data > 0:
                    db.query(AITrainingData).filter(
                        AITrainingData.created_at < cutoff_date,
                        AITrainingData.is_processed == True
                    ).delete()
                    db.commit()
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {old_data} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                else:
                    logger.info("‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI...")
        
        self.is_running = True
        self.setup_schedules()
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        asyncio.run(self.collect_data_batch())
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        logger.info("‚è∞ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(60)
        
        logger.info("üõë –°–µ—Ä–≤–∏—Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            'is_running': self.is_running,
            'config': self.config,
            'stats': self.stats,
            'scheduled_jobs': len(schedule.jobs)
        }


def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    service = ContinuousLearningService()
    
    try:
        service.start()
    except KeyboardInterrupt:
        service.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        service.stop()


if __name__ == "__main__":
    main() 