#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π AI —Å–∏—Å—Ç–µ–º—ã
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π transfer learning
"""

import os
import sys
import subprocess
import logging
import time
from datetime import datetime
import json
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('ai_setup.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def print_header(title):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_step(step_num, total_steps, description):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–≥–∞"""
    print(f"\n[{step_num}/{total_steps}] {description}")
    print("-" * 50)

def run_command(command, description="", check=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–≤–æ–¥–æ–º"""
    if description:
        logger.info(f"üîß {description}")
    
    logger.info(f"–í—ã–ø–æ–ª–Ω—è—é: {command}")
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                logger.debug(f"–í—ã–≤–æ–¥: {result.stdout}")
            return True
        else:
            logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                logger.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
            if result.stdout:
                logger.error(f"–í—ã–≤–æ–¥: {result.stdout}")
            if check:
                raise subprocess.CalledProcessError(result.returncode, command)
            return False
    
    except subprocess.TimeoutExpired:
        logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç: {command}")
        if check:
            raise
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        if check:
            raise
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        logger.error(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
        return False
    
    logger.info(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    return True

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    os_name = platform.system()
    logger.info(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {os_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    if os_name == "Linux":
        try:
            with open('/proc/meminfo', 'r') as f:
                meminfo = f.read()
            mem_total = None
            for line in meminfo.split('\n'):
                if 'MemTotal:' in line:
                    mem_total = int(line.split()[1]) * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
                    break
            
            if mem_total and mem_total < 2 * 1024 * 1024 * 1024:  # 2GB
                logger.warning("‚ö†Ô∏è –ú–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π")
            elif mem_total:
                logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {mem_total // (1024*1024*1024)} GB")
        except:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏")
    
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    req_file = os.path.join("ai_system", "requirements.txt")
    
    if not os.path.exists(req_file):
        logger.error(f"‚ùå –§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {req_file}")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    run_command(
        f"{sys.executable} -m pip install --upgrade pip",
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip",
        check=False
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    success = run_command(
        f"{sys.executable} -m pip install -r {req_file}",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt",
        check=False
    )
    
    if not success:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–≥—É—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è")
        logger.info("–ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        essential_packages = [
            "torch>=1.9.0",
            "scikit-learn>=1.0.0",
            "pandas>=1.3.0",
            "numpy>=1.21.0",
            "requests>=2.25.0",
            "beautifulsoup4>=4.10.0"
        ]
        
        for package in essential_packages:
            run_command(
                f"{sys.executable} -m pip install {package}",
                f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}",
                check=False
            )
    
    return True

def setup_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        "ai_system/medical_data",
        "ai_system/trained_models",
        "ai_system/logs",
        "ai_system/cache"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    return True

def download_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        sys.path.append('ai_system')
        from data_downloader import MedicalDataDownloader
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
        downloader = MedicalDataDownloader("ai_system/medical_data")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_path = downloader.download_all_data(
            include_synthetic=True,
            synthetic_count=500  # –ë–æ–ª—å—à–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        )
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {data_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def train_model(epochs=100, use_transfer_learning=False):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    logger.info("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤—â–∏–∫
        sys.path.append('ai_system')
        from train_model import MedicalModelTrainer
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤—â–∏–∫
        trainer = MedicalModelTrainer()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º transfer learning
        if use_transfer_learning:
            model_path = os.path.join("ai_system", "trained_models", "best_medical_model.pth")
            if os.path.exists(model_path):
                logger.info("üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é transfer learning...")
                trainer.setup_transfer_learning(model_path)
            else:
                logger.info("üìù –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        success = trainer.full_training_pipeline(
            num_epochs=epochs,
            download_new_data=False  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        )
        
        if success:
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error("‚ùå –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º inference
        sys.path.append('ai_system')
        from inference import diagnose_symptoms, get_model_status
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
        status = get_model_status()
        if 'error' in status:
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {status['error']}")
            return False
        
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        logger.info(f"   - –°–∏–º–ø—Ç–æ–º–æ–≤: {status.get('symptoms_count', 0)}")
        logger.info(f"   - –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {status.get('diseases_count', 0)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        test_symptoms = ["–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–∫–∞—à–µ–ª—å"]
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã: {test_symptoms}")
        
        result = diagnose_symptoms(test_symptoms, top_k=2)
        
        if 'error' in result:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {result['error']}")
            return False
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"   - –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(result.get('predictions', []))}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def create_startup_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üìú –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞...")
    
    script_content = """#!/usr/bin/env python3
\"\"\"
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã
\"\"\"
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AI —Å–∏—Å—Ç–µ–º–µ
sys.path.append(os.path.join(os.path.dirname(__file__), 'ai_system'))

from inference import MedicalDiagnosisInference

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ AI —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä inference
    ai = MedicalDiagnosisInference()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    ai.interactive_mode()

if __name__ == "__main__":
    main()
"""
    
    with open("start_ai.py", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º (–Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö)
    if os.name != 'nt':
        os.chmod("start_ai.py", 0o755)
    
    logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω: start_ai.py")
    return True

def generate_summary():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    summary = {
        "installation_date": datetime.now().isoformat(),
        "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        "platform": platform.system(),
        "status": "completed",
        "files_created": [
            "ai_system/medical_data/medical_data.json",
            "ai_system/trained_models/best_medical_model.pth",
            "ai_system/trained_models/data_processor.pkl",
            "start_ai.py"
        ],
        "next_steps": [
            "–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python start_ai.py' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ API",
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        ]
    }
    
    with open("ai_installation_summary.json", "w", encoding="utf-8") as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    logger.info("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ai_installation_summary.json")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    start_time = time.time()
    
    print_header("ü§ñ –£–°–¢–ê–ù–û–í–ö–ê AI –°–ò–°–¢–ï–ú–´ –ú–ï–î–ò–¶–ò–ù–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("–í–µ—Ä—Å–∏—è: 2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Transfer Learning")
    print("–ê–≤—Ç–æ—Ä: AI Assistant")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    use_transfer_learning = "--transfer-learning" in sys.argv
    epochs = 100
    
    for arg in sys.argv:
        if arg.startswith("--epochs="):
            epochs = int(arg.split("=")[1])
    
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: epochs={epochs}, transfer_learning={use_transfer_learning}")
    
    steps = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏", check_python_version),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", check_system_requirements),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", install_dependencies),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", setup_directories),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", download_data),
        ("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", lambda: train_model(epochs, use_transfer_learning)),
        ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", test_model),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞", create_startup_script),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞", generate_summary)
    ]
    
    total_steps = len(steps)
    completed_steps = 0
    
    try:
        for i, (description, func) in enumerate(steps, 1):
            print_step(i, total_steps, description)
            
            if func():
                completed_steps += 1
                logger.info(f"‚úÖ –®–∞–≥ {i}/{total_steps} –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                logger.error(f"‚ùå –®–∞–≥ {i}/{total_steps} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        elapsed_time = time.time() - start_time
        
        print_header("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {completed_steps}/{total_steps}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {completed_steps/total_steps*100:.1f}%")
        
        if completed_steps == total_steps:
            print("\nüéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start_ai.py")
            print("2. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
            print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
            print("- README.md - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            print("- ai_system/README.md - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
            print("- ai_installation_summary.json - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
        else:
            print("\n‚ö†Ô∏è –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            print("–õ–æ–≥ —Ñ–∞–π–ª: ai_setup.log")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print_header("üîö –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main() 