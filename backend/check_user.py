#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_user.py [user_id]
–ü—Ä–∏–º–µ—Ä: python check_user.py 5
"""

import sys
import json
import os
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv(
    "DATABASE_URL", "mysql+pymysql://vrachi_user:1435511926Ss..@localhost:3306/online_doctors_db"
)

def check_user_data(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    try:
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as connection:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
            print("="*60)
            
            # 1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            print("\n1Ô∏è‚É£ –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:")
            user_query = text("""
                SELECT 
                    id, email, role, is_active, auth_provider, avatar_path, 
                    created_at, updated_at
                FROM users 
                WHERE id = :user_id
            """)
            user_result = connection.execute(user_query, {"user_id": user_id}).fetchone()
            
            if not user_result:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            print(f"üìß Email: {user_result.email}")
            print(f"üë§ –†–æ–ª—å: {user_result.role}")
            print(f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user_result.is_active else '–ù–µ—Ç'}")
            print(f"üîê –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {user_result.auth_provider or 'Email'}")
            print(f"üñºÔ∏è –ê–≤–∞—Ç–∞—Ä: {user_result.avatar_path or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            print(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_result.created_at}")
            
            # 2. –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞
            print("\n2Ô∏è‚É£ –ü–†–û–§–ò–õ–¨ –ü–ê–¶–ò–ï–ù–¢–ê:")
            patient_query = text("""
                SELECT 
                    full_name, contact_phone, contact_address, city, 
                    district, country, medical_info
                FROM patient_profiles 
                WHERE user_id = :user_id
            """)
            patient_result = connection.execute(patient_query, {"user_id": user_id}).fetchone()
            
            if patient_result:
                print(f"üë®‚Äç‚öïÔ∏è –§–ò–û: {patient_result.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {patient_result.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {patient_result.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"üèòÔ∏è –†–∞–π–æ–Ω: {patient_result.district or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"üåç –°—Ç—Ä–∞–Ω–∞: {patient_result.country or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"üè† –ê–¥—Ä–µ—Å: {patient_result.contact_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {patient_result.medical_info or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            else:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # 3. –ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞
            print("\n3Ô∏è‚É£ –ü–†–û–§–ò–õ–¨ –í–†–ê–ß–ê:")
            doctor_query = text("""
                SELECT 
                    full_name, specialization, experience, education, 
                    cost_per_consultation, city, district, languages, 
                    practice_areas, is_verified, is_active, country
                FROM doctor_profiles 
                WHERE user_id = :user_id
            """)
            doctor_result = connection.execute(doctor_query, {"user_id": user_id}).fetchone()
            
            if doctor_result:
                print(f"üë®‚Äç‚öïÔ∏è –§–ò–û: {doctor_result.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {doctor_result.specialization or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"üìÖ –û–ø—ã—Ç: {doctor_result.experience or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {doctor_result.education or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {doctor_result.cost_per_consultation or 0} —Å—É–º")
                print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {doctor_result.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"üèòÔ∏è –†–∞–π–æ–Ω: {doctor_result.district or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"üåç –°—Ç—Ä–∞–Ω–∞: {doctor_result.country or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                
                # –Ø–∑—ã–∫–∏
                languages = doctor_result.languages
                if languages:
                    if isinstance(languages, str):
                        try:
                            languages = json.loads(languages)
                        except:
                            pass
                    print(f"üó£Ô∏è –Ø–∑—ã–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {', '.join(languages) if isinstance(languages, list) else languages}")
                else:
                    print("üó£Ô∏è –Ø–∑—ã–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: –ù–µ —É–∫–∞–∑–∞–Ω—ã")
                    
                print(f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if doctor_result.is_verified else '–ù–µ—Ç'}")
                print(f"üü¢ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if doctor_result.is_active else '–ù–µ—Ç'}")
                print(f"üìç –û–±–ª–∞—Å—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ (—Å—Ç–∞—Ä–æ–µ): {doctor_result.practice_areas or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}")
            else:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # 4. –ó–∞—è–≤–∫–∏ –≤—Ä–∞—á–∞
            print("\n4Ô∏è‚É£ –ó–ê–Ø–í–ö–ò –ù–ê –†–û–õ–¨ –í–†–ê–ß–ê:")
            applications_query = text("""
                SELECT 
                    id, full_name, specialization, city, district, languages,
                    status, created_at, processed_at
                FROM doctor_applications 
                WHERE user_id = :user_id
                ORDER BY created_at DESC
                LIMIT 5
            """)
            applications_result = connection.execute(applications_query, {"user_id": user_id}).fetchall()
            
            if applications_result:
                for i, app in enumerate(applications_result, 1):
                    print(f"\nüìã –ó–∞—è–≤–∫–∞ #{app.id} (#{i}):")
                    print(f"   üë§ –§–ò–û: {app.full_name}")
                    print(f"   ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {app.specialization}")
                    print(f"   üèôÔ∏è –ì–æ—Ä–æ–¥: {app.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                    print(f"   üèòÔ∏è –†–∞–π–æ–Ω: {app.district or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                    
                    # –Ø–∑—ã–∫–∏ –≤ –∑–∞—è–≤–∫–µ
                    languages = app.languages
                    if languages:
                        if isinstance(languages, str):
                            try:
                                languages = json.loads(languages)
                            except:
                                pass
                        print(f"   üó£Ô∏è –Ø–∑—ã–∫–∏: {', '.join(languages) if isinstance(languages, list) else languages}")
                    else:
                        print("   üó£Ô∏è –Ø–∑—ã–∫–∏: –ù–µ —É–∫–∞–∑–∞–Ω—ã")
                        
                    status_emoji = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå"}
                    print(f"   üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(app.status, '‚ùì')} {app.status}")
                    print(f"   üìÖ –ü–æ–¥–∞–Ω–∞: {app.created_at}")
                    if app.processed_at:
                        print(f"   ‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {app.processed_at}")
            else:
                print("‚ùå –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            print("\n" + "="*60)
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_user.py [user_id]")
        print("üìñ –ü—Ä–∏–º–µ—Ä: python check_user.py 5")
        sys.exit(1)
    
    try:
        user_id = int(sys.argv[1])
        check_user_data(user_id)
    except ValueError:
        print("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        sys.exit(1)

if __name__ == "__main__":
    main() 