#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –¥–ª—è Healzy.uz
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–∏—Ö –∏ —É–ª—É—á—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
"""

import asyncio
import schedule
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models import get_db, AITrainingData, AIDiagnosis, AIFeedback, AIModel, AIModelTraining
from ai_service.data_collector import RealDataCollector
from ai_service.model_trainer import ModelTrainer
from ai_service.utils import calculate_model_accuracy

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('continuous_learning.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ContinuousLearningSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
    1. –°–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    2. –û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    3. –ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    4. –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    """
    
    def __init__(self):
        self.data_collector = RealDataCollector()
        self.model_trainer = ModelTrainer()
        self.min_accuracy_threshold = 0.7  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏
        self.retraining_interval_days = 7  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        self.data_collection_interval_hours = 6  # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        
    async def collect_new_data(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üåê –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            result = await self.data_collector.collect_all_sources(limit=100)
            
            if result['total_collected'] > 0:
                logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {result['total_collected']} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                await self.process_collected_data()
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def process_collected_data(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            with next(get_db()) as db:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                unprocessed = db.query(AITrainingData).filter(
                    AITrainingData.is_processed == False
                ).limit(100).all()
                
                processed_count = 0
                for data in unprocessed:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                    if self._validate_data_quality(data):
                        data.is_processed = True
                        data.is_validated = True
                        processed_count += 1
                    else:
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        db.delete(data)
                
                db.commit()
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _validate_data_quality(self, data: AITrainingData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
        if not data.title or len(data.title) < 10:
            return False
        if not data.content or len(data.content) < 50:
            return False
        if not data.symptoms and not data.diseases:
            return False
        if data.quality_score < 0.3:
            return False
        return True
    
    async def learn_from_feedback(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            with next(get_db()) as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
                recent_feedback = db.query(AIFeedback).filter(
                    AIFeedback.created_at >= datetime.now() - timedelta(days=7)
                ).all()
                
                if not recent_feedback:
                    logger.info("–ù–µ—Ç –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                    return
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                correct_predictions = 0
                total_predictions = len(recent_feedback)
                
                for feedback in recent_feedback:
                    if feedback.was_correct:
                        correct_predictions += 1
                
                accuracy = correct_predictions / total_predictions if total_predictions > 0 else 0
                logger.info(f"üìà –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {accuracy:.2%}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                for feedback in recent_feedback:
                    if feedback.diagnosis_id:
                        diagnosis = db.query(AIDiagnosis).filter(
                            AIDiagnosis.id == feedback.diagnosis_id
                        ).first()
                        
                        if diagnosis and feedback.was_correct:
                            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å–ª—É—á–∞–π –≤ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            training_data = AITrainingData(
                                source_name="user_feedback",
                                source_url="internal",
                                title=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ #{diagnosis.id}",
                                content=diagnosis.symptoms_description,
                                symptoms=diagnosis.detected_symptoms,
                                diseases=diagnosis.predicted_diseases,
                                treatments=[],
                                language="ru",
                                category="confirmed_diagnosis",
                                quality_score=0.95,  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                is_processed=True,
                                is_validated=True
                            )
                            db.add(training_data)
                
                db.commit()
                logger.info("‚úÖ –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    async def check_and_retrain_models(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
            
            with next(get_db()) as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ
                last_training = db.query(AIModelTraining).order_by(
                    AIModelTraining.created_at.desc()
                ).first()
                
                need_retrain = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                if not last_training:
                    need_retrain = True
                    logger.info("–ú–æ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –æ–±—É—á–∞–ª–∏—Å—å")
                else:
                    days_since_training = (datetime.now() - last_training.created_at).days
                    if days_since_training >= self.retraining_interval_days:
                        need_retrain = True
                        logger.info(f"–ü—Ä–æ—à–ª–æ {days_since_training} –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
                current_accuracy = await self._calculate_current_accuracy()
                if current_accuracy < self.min_accuracy_threshold:
                    need_retrain = True
                    logger.warning(f"–¢–æ—á–Ω–æ—Å—Ç—å —É–ø–∞–ª–∞ –¥–æ {current_accuracy:.2%}")
                
                if need_retrain:
                    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
                    await self.retrain_all_models()
                else:
                    logger.info(f"‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –¢–æ—á–Ω–æ—Å—Ç—å: {current_accuracy:.2%}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
    
    async def _calculate_current_accuracy(self) -> float:
        """–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            with next(get_db()) as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
                recent_diagnoses = db.query(AIDiagnosis).join(
                    AIFeedback, AIDiagnosis.id == AIFeedback.diagnosis_id
                ).filter(
                    AIDiagnosis.created_at >= datetime.now() - timedelta(days=7)
                ).all()
                
                if not recent_diagnoses:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
                    return 0.75
                
                correct = sum(1 for d in recent_diagnoses if d.feedback and d.feedback[0].was_correct)
                total = len(recent_diagnoses)
                
                return correct / total if total > 0 else 0.75
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {e}")
            return 0.75
    
    async def retrain_all_models(self):
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            success = self.model_trainer.load_training_data("database")
            
            if not success:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
            result = await self.model_trainer.train_all_models()
            
            if result.get('success'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏
                with next(get_db()) as db:
                    training_record = AIModelTraining(
                        model_name="all_models",
                        training_data_count=len(self.model_trainer.training_data),
                        accuracy=result['models']['symptom_classifier'].get('accuracy', 0),
                        loss=0.0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π loss
                        epochs=10,
                        learning_rate=0.001,
                        training_duration=300,  # —Å–µ–∫—É–Ω–¥—ã
                        notes=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ. –¢–æ—á–Ω–æ—Å—Ç—å: —Å–∏–º–ø—Ç–æ–º—ã {result['models']['symptom_classifier'].get('accuracy', 0):.2%}, –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è {result['models']['disease_classifier'].get('accuracy', 0):.2%}"
                    )
                    db.add(training_record)
                    db.commit()
                
                logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã!")
                logger.info(f"   –¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤: {result['models']['symptom_classifier'].get('accuracy', 0):.2%}")
                logger.info(f"   –¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {result['models']['disease_classifier'].get('accuracy', 0):.2%}")
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏: {e}")
    
    async def update_knowledge_base(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π"""
        try:
            logger.info("üìö –û–±–Ω–æ–≤–ª—è—é –±–∞–∑—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with next(get_db()) as db:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã
                popular_symptoms = db.query(AIDiagnosis.symptoms_description).filter(
                    AIDiagnosis.created_at >= datetime.now() - timedelta(days=30)
                ).limit(100).all()
                
                # –ò—â–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ç–µ–º–∞–º
                for symptoms in popular_symptoms:
                    if symptoms[0]:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        keywords = self._extract_keywords(symptoms[0])
                        
                        # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        for keyword in keywords[:3]:  # –¢–æ–ø-3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
                            await self.data_collector.collect_from_pubmed(keyword, limit=10)
                
                logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    
    def _extract_keywords(self, text: str) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NLP
        common_words = {'—É', '–º–µ–Ω—è', '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–ø—Ä–∏', '–¥–ª—è', '—á—Ç–æ', '–∫–∞–∫'}
        words = text.lower().split()
        keywords = [w for w in words if len(w) > 3 and w not in common_words]
        return keywords[:5]
    
    def schedule_tasks(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        schedule.every(self.data_collection_interval_hours).hours.do(
            lambda: asyncio.create_task(self.collect_new_data())
        )
        
        # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        schedule.every().day.at("03:00").do(
            lambda: asyncio.create_task(self.learn_from_feedback())
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        schedule.every().sunday.at("04:00").do(
            lambda: asyncio.create_task(self.check_and_retrain_models())
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è
        schedule.every(3).days.do(
            lambda: asyncio.create_task(self.update_knowledge_base())
        )
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI...")
        logger.info("=" * 60)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        self.schedule_tasks()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await self.collect_new_data()
        await self.learn_from_feedback()
        await self.check_and_retrain_models()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info("   –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
        logger.info("   –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∑—ã–≤–∞—Ö: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00")
        logger.info("   –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
        logger.info("   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        while True:
            schedule.run_pending()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = ContinuousLearningSystem()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "collect":
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            await system.collect_new_data()
        elif command == "train":
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            await system.retrain_all_models()
        elif command == "feedback":
            # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await system.learn_from_feedback()
        elif command == "check":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
            accuracy = await system._calculate_current_accuracy()
            print(f"–¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%}")
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  collect  - —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("  train    - –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
            print("  feedback - –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
            print("  check    - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏")
            print("  (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) - –∑–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    else:
        # –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        await system.run_forever()


if __name__ == "__main__":
    print("üß† –°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –¥–ª—è Healzy.uz")
    print("=" * 60)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True) 